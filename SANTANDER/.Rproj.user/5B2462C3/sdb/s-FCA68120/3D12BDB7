{
    "contents" : "response <- train.y\n\n# create folds------------------------------------------------------------------------------------------\n\ndataset_blend_train = matrix(0, nrow(train), 5)\n\ndataset_blend_test_j = matrix(0, nrow(test), 5) # this hould always be number of folds\n\ndataset_blend_test = matrix(0, nrow(test), 5)\n\n# start iteration loop---------------------------------------------------------------------------------\n\n\nfor(j in 1:5)\n  \n{\n  \n  print(paste(\"starting gbm iteration ; number :\", j))\n  \n  set.seed(04*24*2016*j)\n  \n  sample_train <- sample(x = nrow(train), size = nrow(train), replace = T )\n  \n  sample_test <- sample(x = nrow(test), size = nrow(test), replace = T )\n  \n  train <- train[sample_train, ]\n  \n  test <- train[sample_test, ]\n  \n  \n  require(caret)\n  \n  skf = createFolds(response, k = 5)\n  \n  print(paste(nrow(dataset_blend_test_j),ncol(dataset_blend_test_j)))\n  \n  # start fold loop------------------------------------------------------------------------------------\n  \n  ### Loop over the folds\n  \n  i <- 0\n  \n  for (sk in skf) {\n    \n    i <- i + 1\n    \n    print(paste(\"Fold\", i))\n    \n    ### Extract and fit the train/test section for each fold\n    \n    tmp_train <- unlist(skf[i])\n    \n    x_train = train[-tmp_train,]\n    \n    y_train = response[-tmp_train]\n    \n    x_test  = train[tmp_train,]\n    \n    y_test  = response[tmp_train]\n    \n    \n    require(h2o)\n    \n    localH2O <- h2o.init(nthreads = 4, max_mem_size = '12g', assertion = F)\n    \n    x_train$target <- as.factor(y_train)\n    \n    train.hex <- as.h2o(localH2O, object = x_train)\n    \n    test.hex <- as.h2o(localH2O, object = x_test)\n    \n    \n    myX <- names(train)\n    \n    myY <- \"target\"\n    \n    print(paste(\"training gbm for iteration :\", j, \" Fold ; number :\", i))\n    \n    \n    test_gbm <- h2o.gbm(x = myX,\n                        \n                        y = myY,\n                        \n                        training_frame = train.hex, \n                        \n                        ntrees =  1000, \n                        \n                        max_depth = 10, \n                        \n                        learn_rate = 0.02,\n                        \n                        distribution=\"bernoulli\", \n                        \n                        balance_classes = T\n    )\n    \n    \n    pred_gbm <- h2o.predict(object = test_gbm, newdata = test.hex)\n    \n    pred_gbm <- as.data.frame(pred_gbm)\n    \n    dataset_blend_train[tmp_train, j] <- pred_gbm$p0\n    \n    print(paste(\"predicting gbm for test set iteration :\", j,  \"; Fold :\", i))\n    \n    test.hex <- as.h2o(localH2O, object = test)\n    \n    pred_gbm <- h2o.predict(object = test_gbm, newdata = test.hex)\n    \n    pred_gbm <- as.data.frame(pred_gbm)\n    \n    dataset_blend_test_j[, i] <- pred_gbm$p0 # check whether to run p0 or p1\n    \n  }\n  \n  dataset_blend_test[, j] <- rowMeans(dataset_blend_test_j)\n  \n}\n  \nrequire(readr)\n\nwrite_csv(data.frame(dataset_blend_train), \"D:\\\\kaggle\\\\SANTANDER\\\\copy\\\\ENSM\\\\GBM\\\\TRAIN\\\\blend_train_gbm_04242016_2.csv\")\n\nwrite_csv(data.frame(dataset_blend_test), \"D:\\\\kaggle\\\\SANTANDER\\\\copy\\\\ENSM\\\\GBM\\\\TEST\\\\blend_test_gbm_04242016_2.csv\")",
    "created" : 1461505451935.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2431505779",
    "id" : "3D12BDB7",
    "lastKnownWriteTime" : 1461515577,
    "path" : "D:/kaggle/SANTANDER/copy/ENSM/bag_gbm.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}