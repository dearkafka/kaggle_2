require("h2o") ;require("h2oEnsemble"); require("SuperLearner"); require("cvAUC")

library(readr); library(xgboost); library(doParallel); library(caret); library(Metrics)


localH2O <- h2o.init(max_mem_size = "10g")

train_target <- as.factor(train_target)

train$ID <- train_ID; train$target <- train_target

test$ID <- test_ID

feature.names <- names(train[1:(ncol(train) -2) ])

train.hex <- as.h2o(localH2O, object = train)

test.hex <- as.h2o(localH2O, object = test)

split <- h2o.runif(train.hex, seed = 1234)

training_frame <- h2o.assign(train.hex[split<0.9,], "training_frame")

validation_frame <- h2o.assign(train.hex[split>=0.9,], "validation_frame")

###############################################################################


#rf

start <- Sys.time()

test_rf <- h2o.randomForest(x = feature.names,
                            
                            y = "target",
                            
                            training_frame = training_frame, 
                            
                            validation_frame = validation_frame,
                            
                            model_id = "rf_09292015", 
                            
                            ntrees = 2000, 
                            
                            max_depth = 10, 
                            
                            binomial_double_trees = T, 
                            
                            balance_classes = T, 
                            
                            seed = 8675309 
                            
)

rf_time <- Sys.time() - start #17.68586 mins #Total - 165.xx mins

######################################################################################################

test_rf@model$training_metrics@metrics$AUC

test_rf@model$validation_metrics@metrics$AUC



h2o.performance(model = test_rf, validation_frame)

pred_rf <- h2o.predict(object = test_rf, newdata = test.hex)

pred_rf <- as.data.frame(pred_rf)

submission <- data.frame(ID = test_ID)

submission$target <- pred_rf$p1

write_csv(submission, "D:/kaggle/Springleaf/SUBMISSION/rf_10122015.csv")


###################################################################################################################################################################

#GLM

start <- Sys.time()

test_glm <- h2o.glm( x = feature.names,
                     
                     y = "target",
                     
                     training_frame = training_frame,
                     
                     validation_frame = validation_frame,
                     
                     family = "binomial",
                     
                     lambda_search = TRUE,
                     
                     nlambdas = 10, 
                     
                     model_id = "glm_test", 
                     
                     solver = "L_BFGS",
                     
                     keep_cross_validation_predictions = T,
                     
                     alpha = c(0, 0.1, 0.2, 0.3, 0.4, 0.6, 0.8, 1), 
                     
                     link = "logit", 
                     
                     standardize = T 
)


glm_time <- Sys.time() - start #5.086208 mins



test_glm@model$training_metrics@metrics$AUC


test_glm@model$validation_metrics@metrics$AUC




test_glm@model$training_metrics@metrics$AUC

h2o.performance(model = test_glm, validation_frame)

pred_glm <- h2o.predict(object = test_glm, newdata = test.hex)

pred_glm <- as.data.frame(pred_glm)

submission <- data.frame(ID = test_ID)

submission$target <- pred_glm$p1

write_csv(submission, "D:/kaggle/Springleaf/SUBMISSION/glm_10122015.csv")



##############################################################################


########################################################################################################

#GBM

start <- Sys.time()

test_gbm <- h2o.gbm(x = feature.names,
                    
                    y = "target",
                    
                    training_frame = training_frame,
                    
                    validation_frame = validation_frame,
                    
                    model_id = "gbm_09272015", 
                    
                    ntrees =  100, 
                    
                    max_depth = 20, 
                    
                    learn_rate = 0.014, 
                    
                    seed = 8675309, 
                    
                    balance_classes = T, 
                    
                    min_rows = 9 
)


gbm_time <- Sys.time() - start #1.496173 hours

h2o.saveModel(object = test_gbm, path = "D://kaggle//Springleaf//gbm_09282015")

#code working


#add validation dataset to check during training 

test_gbm@model$training_metrics@metrics$AUC #Now showing AUC on train

test_gbm@model$scoring_history$number_of_trees

test_gbm@model$scoring_history$training_AUC

test_gbm@model$scoring_history$validation_AUC

test_gbm@model$training_metrics@metrics$AUC



h2o.performance(model = test_gbm, validation_frame)

pred_gbm <- h2o.predict(object = test_gbm, newdata = test.hex)

submission <- data.frame(ID = test_ID)

submission$target <- pred_gbm

write_csv(submission, "D:/kaggle/Springleaf/SUBMISSION/gbm_10122015.csv")

#####################################################################################################

###################################################################################################