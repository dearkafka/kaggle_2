{
    "contents" : "require(data.table); require(lubridate); require(caret); require(sqldf); require(xgboost); require(xlsx); require(dplyr); require(readr); require(doParallel); require(bit64)\n\nSpanish2English <- fread(\"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\Spanish2English.csv\", data.table = F)\n\ntrain_raw <- fread(\"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\train.csv\", data.table = F)\n\nextra <- cbind.data.frame( ID = train_raw$ID, \n                           \n                           var3 = train_raw$var3, \n                           \n                           var15 = train_raw$var15, \n                           \n                           var38 = train_raw$var38, \n                           \n                           TARGET = train_raw$TARGET )\n\ntrain_raw <- train_raw[, !(names(train_raw) %in% names(extra))]\n\nnames(train_raw) <- Spanish2English$English\n\ntrain_raw <- cbind(train_raw, extra)\n\n\ntest_raw <- fread(\"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\test.csv\", data.table = F)\n\nextra <- cbind.data.frame( ID = test_raw$ID, \n                           \n                           var3 = test_raw$var3, \n                           \n                           var15 = test_raw$var15, \n                           \n                           var38 = test_raw$var38 )\n\ntest_raw <- test_raw[, !(names(test_raw) %in% names(extra))]\n\nnames(test_raw) <- Spanish2English$English\n\ntest_raw <- cbind(test_raw, extra)\n\n\n##############################################################################################################\n\n\nresponse <- train_raw$TARGET\n\ntrain_raw$TARGET <- NULL\n\ntrain_raw$ID <- NULL\n\n\nid <- test_raw$ID\n\ntest_raw$ID <- NULL\n\ntmp <- rbind(train_raw, test_raw)\n\n\n##############################################################################################################\n\na <- data.frame(sapply(tmp, function(x) length(unique(x))))\n\ndevtools::source_gist('4a0a5ab9fe7e1cf3be0e')\n\nb <- strtable(tmp)\n\nc <- lapply(tmp, function(x) (unique(x)))\n\nunique_df <- cbind.data.frame(unique = a$sapply.tmp..function.x..length.unique.x..., b)\n\nwrite_csv(unique_df, \"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\unique_df.csv\")\n\n\n\n# checking for categorical and continous vars-----------------------------------------------------------------\n\nlen_unique <- rep(0, ncol(tmp))\n\nfor(i in 1:nrow(unique_df))\n\n  {\n  \n  if(unique_df$unique[i] < 10) \n    \n    {\n    \n    len_unique[i] <- unique_df$variable[i]\n  }\n  \n}\n\nlen_unique <- len_unique[len_unique != 0]\n\n\n#tmp_unique <- tmp[, len_unique]\n\n\nfor(f in names(tmp)) {\n  \n  if (length(unique(tmp[[f]])) == 1) {\n    \n    cat(f, \"is constant in train and test combine we delete it.\\n\")\n    \n    tmp[[f]] <- NULL\n    \n  }\n}\n\n\n\n# seperate dummy variables ( #indicator0# ) from tmp\n\ndummy <- names(tmp)[grep(\"indicator 0\", names(tmp), value = F)]\n\ntmp_dummy <- tmp[, !(names(tmp) %in% dummy)]\n\n\n\n# a function for checking number of unique elements and obtaining a freq. output------------------\n\n# unique_no = less than or equal to unique_no----------------------------------------------------\n\nunique_freq <- function(df, unique_no)\n\n  {\n  \n  a <- (sapply(df, function(x) length(unique(x))))\n  \n  b <- names(df)\n  \n  unique_df <- data.frame(names = b, len = a, row.names = 1:length(b), stringsAsFactors = F)\n  \n  uniq_nam <- c()\n  \n  for(i in 1:nrow(unique_df)){\n    \n    if(unique_df$len[i] <= unique_no){\n      \n      uniq_nam <- c(uniq_nam, unique_df$names[i])\n      \n    }\n  }\n  \n  uniq_tmp <- df[, uniq_nam]\n  \n  o_p <- lapply(uniq_tmp, function(x)table(x))\n  \n  return(o_p)\n}\n\n\n# function to calculate percentage of zeros in every column--------------------------------------\n\nzero_percent <- c()\n\nfor(i in 1:ncol(tmp)){\n  \n  x <- (sum(tmp[i] == 0) / nrow(tmp)) * 100\n  \n  zero_percent <- c(zero_percent, x)\n  \n}\n\ndf_zero <- data.frame(name = names(tmp), Z_P = zero_percent )\n\nwrite_csv(df_zero, \"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\df_zero.csv\")\n\n\n################################################################################################\n\n#modelling\n\ntrain <- tmp[c(1:nrow(train_raw)), ]\n\ntest <- tmp[c((nrow(train_raw) + 1) : nrow(tmp)), ]\n\n\n#h <- sample(nrow(train),2000)\n\n#dval <- xgb.DMatrix(data = data.matrix(train[h,]),label = response[h])\n\n#dtrain <- xgb.DMatrix(data = data.matrix(train[-h,]),label = response[-h], missing = NaN)\n\ndtrain <- xgb.DMatrix(data = data.matrix(train),label = response, missing = NaN)\n\n\nwatchlist<-list(val = dval, train = dtrain)\n\ncl <- makeCluster(4); registerDoParallel(cl) \n\nparam <- list(  objective           = \"binary:logistic\", \n                \n                booster             = \"gbtree\",\n                \n                eval_metric         = \"auc\",\n                \n                eta                 = 0.02,\n                \n                max_depth           = 5,\n                \n                subsample           = 0.7,\n                \n                colsample_bytree    = 0.7\n                \n                )\n\nclf <- xgb.train(   params              = param, \n                    \n                    data                = dtrain, \n                    \n                    nrounds             = 877,\n                    \n                    #early.stop.round = 1000,\n                    \n                    verbose             = 2,\n                    \n                    #watchlist           = watchlist,\n                    \n                    maximize            = T,\n                    \n                    nthread = 4\n                    \n                    )\n\n\ncv <- xgb.cv(params = param, \n       \n       data = dtrain, \n       \n       nrounds = 877, \n       \n       nfold = 10, \n       \n       prediction = T, \n       \n       showsd = T, \n       \n       maximize = T,\n       \n       nthread = 4)\n\n\npreds <- predict(clf, data.matrix(test), missing = NaN)\n\nsubmission <- data.frame(ID=id, TARGET=preds)\n\ncat(\"saving the submission file\\n\")\n\nwrite.csv(submission, \"D:\\\\kaggle\\\\SANTANDER\\\\SUBMISSION\\\\03262016_1.csv\", row.names = F)\n\n# importance matrix--------------------------------------------------------------------------\n\nimportance_matrix <- xgb.importance(feature_names = names(train), model = clf)\n\njpeg(filename = \"D:\\\\kaggle\\\\SANTANDER\\\\Plots\\\\imp_03262016.jpeg\")\n\nxgb.plot.importance(importance_matrix = importance_matrix[1:20, ])\n\ndev.off()\n",
    "created" : 1458915822054.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3086111768",
    "id" : "2971DA6C",
    "lastKnownWriteTime" : 1459687398,
    "path" : "D:/kaggle/SANTANDER/CODE/03252016_wf.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}