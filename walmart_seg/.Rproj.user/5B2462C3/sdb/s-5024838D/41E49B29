{
    "contents" : "\nrequire(data.table); require(lubridate); require(caret); require(sqldf); require(xgboost); require(xlsx); require(dplyr); require(readr); require(doParallel)\n\nrm(list = ls())\n\ntrain_raw <- fread(input = \"D:\\\\kaggle\\\\HOMESITE\\\\Data\\\\train.csv\", data.table = F)\n\nresponse <- train_raw$QuoteConversion_Flag\n\ntrain_raw$QuoteConversion_Flag <- NULL\n\ntrain_raw$QuoteNumber <- NULL\n\n\n\ntest_raw <- fread(input = \"D:\\\\kaggle\\\\HOMESITE\\\\Data\\\\test.csv\", data.table = F)\n\nid <- test_raw$QuoteNumber\n\ntest_raw$QuoteNumber <- NULL\n\n\n\ntmp <- rbind(train_raw, test_raw)\n\n\"Original_Quote_Date\", \"date\"\n\ntmp$Original_Quote_Date <- as.Date(tmp$Original_Quote_Date)\n\ntmp$month <- as.integer(format(tmp$Original_Quote_Date, \"%m\"))\n\ntmp$year <- as.integer(format(tmp$Original_Quote_Date, \"%y\"))\n\ntmp$day <- weekdays(as.Date(tmp$Original_Quote_Date))\n\ntmp$week <- week((as.Date(tmp$Original_Quote_Date)))\n\ntmp$date <- (((tmp$year * 52 ) + tmp$week) %% 4)\n\n# check which columns has NA\n\nNA_list <- sapply(names(tmp),  function(x) sum(is.na(tmp[, x])))\n\nNA_list <- NA_list[NA_list != 0]\n\n  \ntmp$PersonalField84 <- NULL\n\ntmp$PropertyField29 <- NULL\n\n\nrow_NA <- apply(tmp, 1, function(x) sum(x == -1))\n\n# feat_filled = as.integer(rowSums(tmp[, 1:ncol(tmp)] != 0)) \n\n# seperate character columns\n\nchar <- rep(0, length(names(tmp)))\n\nfor(i in names(tmp))\n  \n{\n  if(class(tmp[, i]) == \"character\"){\n    \n  char <- c(char, i)\n  }\n  \n  char <- char[char != 0 ]\n}\n\n# convert char columns to factors to dummify them\n\ntmp_char <- tmp[, char]\n\n\nfor(f in names(tmp_dummy)){\n  \n  levels <- unique(tmp_dummy[, f])\n  \n  tmp_dummy[,f] <- factor(tmp_dummy[,f], levels = levels)\n  \n}\n\n\ndummies <- dummyVars( ~., data = tmp_char)\n\ntmp_char <- predict(dummies, newdata = tmp_char)\n\ntmp_char <- data.frame(tmp_char)\n\n\nrm(dummies)\n\ngc()\n\n# create dummy cols in batches\n\nnominal_remove <- c(\"Field8\", \"Field9\", \"Field11\")\n\ntmp_dummy <- tmp[ , !(names(tmp) %in% c(char, nominal_remove , \"Original_Quote_Date\", \"date\", \"SalesField8\", \"PropertyField6\",  \"GeographicField10A\"))]\n\nfor(f in names(tmp_dummy)){\n  \n  levels <- unique(tmp_dummy[, f])\n  \n  tmp_dummy[,f] <- factor(tmp_dummy[,f], levels = levels)\n  \n}\n\n# levels of tmp_dummy\n\nlen <- sapply(names(tmp_dummy), function(x) length(unique(tmp_dummy[,x])))\n\nlen[len<2]\n\ntable(tmp_dummy$PropertyField6)\n\ntmp_id_1 <- data.frame(id = 1:nrow(tmp))\n\nfor(i in names(tmp_dummy)[1:266] )\n    {\n    \n    dummies <- dummyVars( ~., data = tmp_dummy[i])\n    tmp_char <- predict(dummies, newdata = tmp_dummy[i])\n    tmp_char <- data.frame(tmp_char)\n    \n    tmp_id_1 <- cbind(tmp_id_1, tmp_char)\n    \n    rm(dummies)\n    }\n\n\n    \nfor (f in names(tmp)) {\n  \n  if (class(tmp[[f]])==\"character\") {\n    \n    levels <- unique(tmp[[f]])\n    \n    tmp[[f]] <- as.integer(factor(tmp[[f]], levels=levels))\n    \n  }\n  \n}\n\n\n\n\ntmp_id_1 <- cbind(tmp, tmp_id_1)\n\nrm(test_raw); rm(train_raw); rm(tmp_char)\n\ntmp_id_1$row_NA <- row_NA\n\n# add interaction terms\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_2.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    #    a = i; b= j\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_plus_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] + tmp_int[, j]\n    \n  }\n}\n\n\ngc()\n\ntmp_new <- cbind(tmp_new, tmp_int)\nrm(tmp_int)\ngc()\n\n# create - interaction features\n\n# add interaction terms\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_2.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_minus_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] - tmp_int[, j]\n    \n  }\n}\n\n\ngc()\n\ntmp_new <- cbind(tmp_new, tmp_int)\nrm(tmp_int)\ngc()\n\n\n\n\n# create * interaction features\n\n\n# add interaction terms\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_2.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_mult_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] * tmp_int[, j]\n    \n  }\n}\n\n\n\n\ntmp_new <- cbind(tmp_new, tmp_int)\nrm(tmp_int)\ngc()\n\n\n\n\n\n\n##################################################################################\n\nrm(tmp); rm(test_raw); rm(train_raw); rm(tmp_char); rm(tmp_int); rm(imp)\n\ntmp_new$row_NA <- row_NA\n\n#tmp_new$feat <- feat_filled\n\n# converting to sparse matrix\n\nrownames(tmp_id_1) <- tmp_id_1$id\n\ntmp_id_1$id <- NULL\n\nlibrary(Matrix)\n\ntmp_id_sparse <- Matrix(as.matrix(tmp_id_1), sparse = TRUE)\n\n\n\ntrain <- tmp_new[c(1:260753), ]\n\ntest <- tmp_new[c(260754:434589), ]\n\nrm(tmp_new)\n\ngc()\n\n#train[is.na(train)] <- -1\n\n#test[is.na(test)] <- -1\n\ngc()\n\n\n###################################################################################################\n\n\nfeature.names <- names(train)\n\nh<-sample(nrow(train),10000)\n\ndval<-xgb.DMatrix(data=data.matrix(train[h,]),label=response[h])\n\ndtrain<-xgb.DMatrix(data=data.matrix(train[-h,]),label=response[-h])\n\n#dtrain<-xgb.DMatrix(data=data.matrix(train),label=response)\n\nwatchlist<-list(val=dval,train=dtrain)\n\nparam <- list(  objective           = \"binary:logistic\", \n                \n                booster = \"gbtree\",\n                \n                eval_metric = \"auc\",\n                \n                eta                 = 0.01, # 0.06, #0.01,\n                \n                max_depth           = 6, #changed from default of 8\n                \n                subsample           = 0.83, # 0.7\n                \n                colsample_bytree    = 0.77, # 0.7\n                \n                num_parallel_tree = 2\n                \n)\n\nstart <- Sys.time()\n\nrequire(doParallel)\n\ncl <- makeCluster(2); registerDoParallel(cl)\n\nset.seed(12*16*15)\n\ncv <- xgb.cv(params = param, data = dtrain, \n\n            nrounds = 3000, \n\n           nfold = 3, \n\n          showsd = T, \n\n         maximize = F)\n\n\ntime_taken <- Sys.time() - start\n\nwrite_csv(submission, \"D:\\\\kaggle\\\\HOMESITE\\\\submission\\\\12092015\\\\12092015_cv.csv\")\n\n\n\nclf <- xgb.train(   params              = param,\n                    \n                    data                = dtrain,\n                    \n                    nrounds             = 3000,\n                    \n                    verbose             = 1,  #1\n                    \n                    #early.stop.round    = 400,\n                    \n                    watchlist           = watchlist,\n                    \n                    maximize            = FALSE,\n                    \n                    nthread = 2)\n\n\ntime_taken <- Sys.time() - start\n\n\npred <- predict(clf, data.matrix(test[,feature.names]))\n\nsubmission <- data.frame(QuoteNumber = id, QuoteConversion_Flag = pred)\n\nwrite_csv(submission, \"D:\\\\kaggle\\\\HOMESITE\\\\submission\\\\12092015\\\\12092015_16.csv\")\n\ntime_taken <- Sys.time() - start\n\n\n\npred <- predict(clf, data.matrix(test[,feature.names]), ntreelimit = 1000)\n\nsubmission <- data.frame(QuoteNumber = id, QuoteConversion_Flag = pred)\n\nwrite_csv(submission, \"D:\\\\kaggle\\\\HOMESITE\\\\submission\\\\12092015\\\\12092015_3.csv\")\n",
    "created" : 1450558049683.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "783621413",
    "id" : "41E49B29",
    "lastKnownWriteTime" : 1450506172,
    "path" : "D:/kaggle/HOMESITE/Version_Control/12142015.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}