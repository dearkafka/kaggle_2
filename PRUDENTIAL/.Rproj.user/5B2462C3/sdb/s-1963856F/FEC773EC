{
    "contents" : "\n# create folds------------------------------------------------------------------------------------------\n\ndataset_blend_train = matrix(0, nrow(train), 1)\n\ndataset_blend_test_j = matrix(0, nrow(test), 5)\n\ndataset_blend_test = matrix(0, nrow(test), 1)\n\n# start iteration loop---------------------------------------------------------------------------------\n\n  print(paste(\"starting glm iteration ; number :\", j))\n  \n  set.seed(1*23*2016*j)\n  \n  require(caret)\n  \n  skf = createFolds(response, k = 5)\n  \n  print(paste(nrow(dataset_blend_test_j),ncol(dataset_blend_test_j)))\n  \n  # start fold loop------------------------------------------------------------------------------------\n  \n  ### Loop over the folds\n  \n  i <- 0\n  \n  for (sk in skf) {\n    \n    i <- i + 1\n    \n    print(paste(\"Fold\", i))\n    \n    ### Extract and fit the train/test section for each fold\n    \n    tmp_train <- unlist(skf[i])\n    \n    x_train = train[-tmp_train,]\n    \n    y_train = response[-tmp_train]\n    \n    x_test  = train[tmp_train,]\n    \n    y_test  = response[tmp_train]\n    \n    \n    require(h2o)\n    \n    localH2O <- h2o.init(nthreads = -1, max_mem_size = '12g')\n    \n    x_train$target <- y_train\n    \n    train.hex <- as.h2o(localH2O, object = x_train)\n    \n    test.hex <- as.h2o(localH2O, object = x_test)\n    \n    \n    myX <- names(train)\n    \n    myY <- \"target\"\n    \n    print(paste(\"training glm iteration :\", j, \"for Fold ; number :\", i))\n    \n    test_glm <- h2o.glm( x = myX,\n                         \n                         y = myY,\n                         \n                         training_frame = train.hex,\n                         \n                         family = \"poisson\",\n                         \n                         lambda_search = TRUE,\n                         \n                         nlambdas = 5, \n                         \n                         model_id = \"glm_test\", \n                         \n                         solver = \"L_BFGS\",\n                         \n                         #keep_cross_validation_predictions = T,\n                         \n                         alpha = c(0, 0.1, 0.2, 0.3, 0.4, 0.6, 0.8, 1), \n                         \n                         link = \"log\", \n                         \n                         standardize = T\n                         \n    )\n    \n    pred_glm <- h2o.predict(object = test_glm, newdata = test.hex)\n    \n    pred_glm <- as.data.frame(pred_glm)\n    \n    \n    dataset_blend_train[tmp_train, j] <- pred_glm$predict\n    \n  \n    print(paste(\"predicting glm for test set iteration :\", j, \"; Fold :\", i))\n    \n    test.hex <- as.h2o(localH2O, object = test)\n    \n    pred_glm <- h2o.predict(object = test_glm, newdata = test.hex)\n    \n    pred_glm <- as.data.frame(pred_glm)\n    \n    dataset_blend_test_j[, i] <- pred_glm$predict\n    \n  }\n  \n  dataset_blend_test[, j] <- rowMeans(dataset_blend_test_j)\n  \n\n\n\nrequire(readr)\n\nwrite_csv(data.frame(dataset_blend_train), \"D:\\\\kaggle\\\\PRUDENTIAL\\\\blend\\\\bag\\\\glm\\\\blend_train_glm_02152016.csv\")\n\nwrite_csv(data.frame(dataset_blend_test), \"D:\\\\kaggle\\\\PRUDENTIAL\\\\blend\\\\bag\\\\glm\\\\blend_test_glm_02152016.csv\")\n",
    "created" : 1454385146839.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "201059894",
    "id" : "FEC773EC",
    "lastKnownWriteTime" : 1454385190,
    "path" : "D:/kaggle/PRUDENTIAL/blend/bag_glm.R",
    "project_path" : "blend/bag_glm.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}