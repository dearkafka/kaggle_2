{
    "contents" : "library(readr); library(xgboost); require(sqldf)\n\n# Set a random seed for reproducibility\n\ncat(\"reading the train and test data\\n\")\n\nset.seed(12202015)\n\ntrain <- fread(\"C:\\\\Users\\\\amulya\\\\Documents\\\\Kaggle\\\\PRUDENTIAL\\\\Data\\\\train.csv\", data.table = F)\n\ntest  <- read_csv(\"C:\\\\Users\\\\amulya\\\\Documents\\\\Kaggle\\\\PRUDENTIAL\\\\Data\\\\test.csv\")\n\n#feature.names <- names(train)[2:ncol(train)-1]\n\nresponse <- train$Response\n\ntrain$Response <- NULL\n\ntmp <- rbind(train, test)\n\n# seperate categorical and continous vars\n\ncategorical_var <- c(paste(\"Product_Info_\", c(1:3,5:7), sep=\"\"), \n                   \n                   paste(\"Employment_Info_\", c(2,3,5), sep=\"\"),\n                   \n                   paste(\"InsuredInfo_\", 1:7, sep=\"\"), \n                   \n                   paste(\"Insurance_History_\", c(1:4,7:9), sep=\"\"), \n                   \n                   \"Family_Hist_1\", \n                   \n                   paste(\"Medical_History_\", c(2:14, 16:23, 25:31, 33:41), sep=\"\")\n                   \n                   )\n\ncontinous_var <- c(\"Product_Info_4\", \"Ins_Age\", \"Ht\", \"Wt\", \"BMI\", \"Employment_Info_1\", \n                    \n                    \"Employment_Info_4\",\"Employment_Info_6\", \"Insurance_History_5\", \n                    \n                    \"Family_Hist_2\", \"Family_Hist_3\", \"Family_Hist_4\",\"Family_Hist_5\"\n                    \n                    )\n\n\ndiscrete_var <- c(\"Medical_History_1\", \"Medical_History_15\", \"Medical_History_24\", \"Medical_History_32\", \n\n                    paste(\"Medical_Keyword_\", 1:48, sep=\"\")\n                    \n                    )\n\n\nfactor_names <- c(categorical_var, discrete_var)\n\ntmp_factors = tmp[ , factor_names] \n\ntmp_factors[is.na(tmp_factors)] <- -1\n\n\ndim(tmp_factors)\n\n\nfor(f in names(tmp_factors)){\n  \n  levels <- unique(tmp_factors[, f])\n  \n  tmp_factors[,f] <- factor(tmp_factors[,f], levels = levels)\n  \n}\n\n\n\n#Important step ^^^^\n\n#############################################################################################################\n\n\n# 2 way count\n\nnms <- combn(names(tmp_factors), 2)\n\ndim(nms)\n\nnms_df <- data.frame(nms) \n\nlen = length(names(nms_df))\n\nfor (i in 1:len) {\n  \n  nms_df[, i] <- as.character(nms_df[, i])\n  \n}\n\ntmp_count <- data.frame(id = 1:dim(tmp)[1])\n\nfor(i in 1:dim(nms_df)[2]){\n  \n  \n  #new df \n  \n  print(((i / dim(nms_df)[2]) * 100 ))\n  \n  tmp_count[, paste(i, \"_two\", sep=\"\")] <- my.f2cnt(th2 = tmp_factors, \n                                                    \n                                                    vn1 = nms_df[1,i], \n                                                    \n                                                    vn2 = nms_df[2,i] )\n  \n}\n\n###############################################################################################################\n\n#3 way count\n\n\nnms <- combn(names(tmp_factors), 3)\n\ndim(nms)\n\nnms_df <- data.frame(nms);\n\nlen = length(names(nms_df))\n\nfor (i in 1:len) {\n  \n  print(paste0(( i / len) *100, \"%\"))\n  \n  nms_df[, i] <- as.character(nms_df[, i])\n  \n}\n\nfor(i in 1:dim(nms_df)[2]){\n  \n  #new df \n  \n  print((i / dim(nms_df)[2]) * 100)\n  \n  tmp_count[, paste(i, \"_three\", sep=\"\")] <- my.f3cnt(th2 = tmp, \n                                                      \n                                                      vn1 = nms_df[1,i], \n                                                      \n                                                      vn2 = nms_df[2,i], \n                                                      \n                                                      vn3 = nms_df[3,i])\n  \n}\n\n\n##############################################################################################################\n\n\n\n#one way count\n\nlen = dim(tmp_factors)[2]\n\nfor(i in 1:len){\n  \n  \n  print((i / len) * 100 )\n  \n  tmp_factors$x <- tmp_factors[, i]\n  \n  sum1 <- sqldf(\"select x, count(1) as cnt\n                \n                from tmp_factors  group by 1 \")\n  \n  tmp1 <- sqldf(\"select cnt from tmp_factors a left join sum1 b on a.x=b.x\")\n  \n  tmp_count[, paste(names(tmp_factors)[i], \"_one\", sep=\"\")] <- tmp1$cnt\n  \n}  \n\n\n##########################################################################################################\n\ntmp_new <- cbind(tmp, tmp_count)\n\nrm(tmp1); rm(tmp_factors); rm(test); rm(train); rm(tmp_count) \n\ngc()\n\ntmp_new[is.na(tmp_new)] <- -1\n\ntrain <- tmp_new[c(1:59381),]\n\ntest <- tmp_new[c(59382:79146),]\n\nrm(tmp_new)\n\ncat(\"assuming text variables are categorical & replacing them with numeric ids\\n\")\n\nfeature.names <- names(train)[-1]\n\nfor (f in feature.names) {\n\n    if (class(train[[f]])==\"character\") {\n    \n      levels <- unique(c(train[[f]], test[[f]]))\n    \n      train[[f]] <- as.integer(factor(train[[f]], levels=levels))\n    \n      test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))\n  }\n}\n\ncat(\"training a XGBoost classifier\\n\")\n\n\n\nclf <- xgboost(data        = data.matrix(train[,feature.names]),\n\n              label       = response,\n              \n              eta         = 0.02,\n              \n              depth       = 21,\n              \n              nrounds     = 4000,\n              \n              objective   = \"count:poisson\",\n              \n              eval_metric = \"rmse\",\n              \n              colsample_bytree=0.65,\n              \n              min_child_weight=3,\n              \n              subsample=0.7)\n\ncat(\"making predictions\\n\")\n\nsubmission <- data.frame(Id=test$Id)\n\nsubmission$Response <- as.integer(round(predict(clf, data.matrix(test[,feature.names]))))\n\n\n# I pretended this was a regression problem and some predictions may be outside the range\n\nsubmission[submission$Response<1, \"Response\"] <- 1\n\nsubmission[submission$Response>8, \"Response\"] <- 8\n\nsubmission[submission$Response==3,\"Response\"] <- 2\n\ncat(\"saving the submission file\\n\")\n\nwrite_csv(submission, \"C:\\\\Users\\\\amulya\\\\Documents\\\\Kaggle\\\\PRUDENTIAL\\\\submission\\\\12202015_2.csv\")\n",
    "created" : 1450598236429.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "1427765654",
    "id" : "D356AE25",
    "lastKnownWriteTime" : 13229740524830817,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}