{
    "contents" : "require(h2o); require(xgboost); require(readr)\n\nresponse <- train.y\n\n# train <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\Data\\\\aws\\\\train_01262016.csv\")\n# \n# train_raw <- train\n# \n# train <- train_raw[sample(nrow(train_raw), 30000), ]\n# \n# test <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\Data\\\\aws\\\\test_01262016.csv\")\n# \n# test_raw <- test\n# \n# test <- test_raw[sample(nrow(test_raw), 30000), ]\n# \n# response_1 <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\Data\\\\aws\\\\response_01262016.csv\")\n# \n# response <- response_1$response\n# \n# response <- response_raw[sample(length(response),30000)]\n\n# create folds------------------------------------------------------------------------------------------\n\ndataset_blend_train = matrix(0, nrow(train), 5)\n\ndataset_blend_test_j = matrix(0, nrow(test), 5) # this should always be number of folds\n\ndataset_blend_test = matrix(0, nrow(test), 5)\n\n# start iteration loop---------------------------------------------------------------------------------\n\nfor(j in 1:5)\n\n  {\n\n  print(paste(\"starting rf iteration ; number :\", j))\n  \n  set.seed(2*05*2016*j)\n  \n  sample_train <- sample(x = nrow(train), size = nrow(train), replace = T )\n  \n  sample_test <- sample(x = nrow(test), size = nrow(test), replace = T )\n  \n  train <- train[sample_train, ]\n  \n  test <- train[sample_test, ]\n  \n  \n  require(caret)\n  \n  skf = createFolds(response, k = 5)\n  \n  print(paste(nrow(dataset_blend_test_j),ncol(dataset_blend_test_j)))\n  \n  # start fold loop------------------------------------------------------------------------------------\n  \n  ### Loop over the folds\n  \n  i <- 0\n  \n  for (sk in skf) {\n    \n    i <- i + 1\n    \n    print(paste(\"Fold\", i))\n    \n    ### Extract and fit the train/test section for each fold\n    \n    tmp_train <- unlist(skf[i])\n    \n    x_train = train[-tmp_train,]\n    \n    y_train = response[-tmp_train]\n    \n    x_test  = train[tmp_train,]\n    \n    y_test  = response[tmp_train]\n    \n    \n    require(h2o)\n    \n    localH2O <- h2o.init(nthreads = -1, max_mem_size = '12g', assertion = F)\n    \n    x_train$target <- as.factor(y_train)\n    \n    train.hex <- as.h2o(x_train)\n    \n    test.hex <- as.h2o(x_test)\n    \n    \n    myX <- names(train)\n    \n    myY <- \"target\"\n    \n    print(paste(\"training rf for iteration : \", j, \"Fold ; number :\", i))\n    \n    test_rf <- h2o.randomForest(x = myX,\n                                \n                                y = myY,\n                                \n                                training_frame = train.hex, \n                                \n                                ntrees = 1000, \n                                \n                                max_depth = 10, \n                                \n                                binomial_double_trees = T, \n                                \n                                balance_classes = T\n                                \n    )\n    \n    pred_rf <- h2o.predict(object = test_rf, newdata = test.hex)\n    \n    pred_rf <- as.data.frame(pred_rf)\n    \n    \n    dataset_blend_train[tmp_train, j] <- pred_rf$p0\n    \n    \n    print(paste(\"predicting rf for test set iteration :\", j, \"; Fold :\", i))\n    \n    test.hex <- as.h2o(test)\n    \n    pred_rf <- h2o.predict(object = test_rf, newdata = test.hex)\n    \n    pred_rf <- as.data.frame(pred_rf)\n    \n    \n    dataset_blend_test_j[, i] <- pred_rf$p0\n    \n    \n  }\n  \n  dataset_blend_test[, j] <- rowMeans(dataset_blend_test_j)\n  \n}\n\nrequire(readr)\n  \nwrite_csv(data.frame(dataset_blend_train), \"D:\\\\kaggle\\\\SANTANDER\\\\copy\\\\ENSM\\\\RF\\\\TRAIN\\\\blend_train_rf_04232016_sample.csv\")\n  \nwrite_csv(data.frame(dataset_blend_test), \"D:\\\\kaggle\\\\SANTANDER\\\\copy\\\\ENSM\\\\RF\\\\TEST\\\\blend_test_rf_04232016_sample.csv\")",
    "created" : 1461441807098.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3531892212",
    "id" : "4AB8B7B8",
    "lastKnownWriteTime" : 1461469587,
    "path" : "D:/kaggle/HOMESITE/blend/bag_rf.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_source"
}