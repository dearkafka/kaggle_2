require(data.table); require(lubridate); require(caret); require(sqldf); require(xgboost); require(xlsx); require(dplyr); require(readr); require(doParallel); require(bit64)
require(data.table); require(lubridate); require(caret); require(sqldf); require(xgboost); require(xlsx); require(dplyr); require(readr); require(doParallel); require(bit64)
Spanish2English <- fread("D:\\kaggle\\SANTANDER\\DATA\\Spanish2English.csv", data.table = F)
train_raw <- fread("D:\\kaggle\\SANTANDER\\DATA\\train.csv", data.table = F)
extra <- cbind.data.frame( ID = train_raw$ID,
var3 = train_raw$var3,
var15 = train_raw$var15,
var38 = train_raw$var38,
TARGET = train_raw$TARGET )
train_raw <- train_raw[, !(names(train_raw) %in% names(extra))]
names(train_raw) <- Spanish2English$English
train_raw <- cbind(train_raw, extra)
test_raw <- fread("D:\\kaggle\\SANTANDER\\DATA\\test.csv", data.table = F)
extra <- cbind.data.frame( ID = test_raw$ID,
var3 = test_raw$var3,
var15 = test_raw$var15,
var38 = test_raw$var38 )
test_raw <- test_raw[, !(names(test_raw) %in% names(extra))]
names(test_raw) <- Spanish2English$English
test_raw <- cbind(test_raw, extra)
##############################################################################################################
response <- train_raw$TARGET
train_raw$TARGET <- NULL
train_raw$ID <- NULL
id <- test_raw$ID
test_raw$ID <- NULL
tmp <- rbind(train_raw, test_raw)
##############################################################################################################
a <- data.frame(sapply(tmp, function(x) length(unique(x))))
devtools::source_gist('4a0a5ab9fe7e1cf3be0e')
b <- strtable(tmp)
c <- lapply(tmp, function(x) (unique(x)))
unique_df <- cbind.data.frame(unique = a$sapply.tmp..function.x..length.unique.x..., b)
write_csv(unique_df, "D:\\kaggle\\SANTANDER\\DATA\\unique_df.csv")
# checking for categorical and continous vars-----------------------------------------------------------------
len_unique <- rep(0, ncol(tmp))
for(i in 1:nrow(unique_df))
{
if(unique_df$unique[i] < 10)
{
len_unique[i] <- unique_df$variable[i]
}
}
len_unique <- len_unique[len_unique != 0]
#tmp_unique <- tmp[, len_unique]
for(f in names(tmp)) {
if (length(unique(tmp[[f]])) == 1) {
cat(f, "is constant in train and test combine we delete it.\n")
tmp[[f]] <- NULL
}
}
len_unique
table(tmp$var1 indicator 0)
table(tmp$var1indicator 0)
table(tmp$`var14 indicator 0`)
table(tmp$`var1 indicator 0`)
table(tmp$`var12 indicator 0`)
table(tmp$`var11 indicator 0`)
table(tmp$`var14 indicator 0`)
table(tmp$`var13 indicator 0`)
table(tmp$`var6 indicator 0`  )
?grep
grep("indicator 0", names(tmp), value = F)
grepl("indicator 0", names(tmp), value = F)
grepl("indicator 0", names(tmp))
grep("indicator 0", names(tmp), value = F)
dummy <- names(tmp)[grep("indicator 0", names(tmp), value = F)]
dummy
tmp_1 <- tmp[, !(names(tmp) %in% dummy)]
tmp$'var1 indicator'
table(tmp$'var1 indicator')
df = tmp
a <- data.frame(sapply(df, function(x) length(unique(x))))
b <- names(df)
a <- (sapply(df, function(x) length(unique(x))))
b <- names(df)
unique_df <- data.frame(names = b, len = a, row.names = 1:length(b))
View(unique_df)
df = tmp
unique_no = 2
a <- (sapply(df, function(x) length(unique(x))))
b <- names(df)
unique_df <- data.frame(names = b, len = a, row.names = 1:length(b))
uniq_nam <- c()
for(i in 1:length(unique_df)){
if(unique_df$len[i] < unique_no){
uniq_nam <- c(uniq_nam, unique_df$names[i])
}
}
uniq_tmp <- df[, uniq_nam]
uniq_tmp
uniq_nam
a <- (sapply(df, function(x) length(unique(x))))
b <- names(df)
unique_df <- data.frame(names = b, len = a, row.names = 1:length(b))
uniq_nam <- c()
for(i in 1:length(unique_df)){
if(unique_df$len[i] <= unique_no){
uniq_nam <- c(uniq_nam, unique_df$names[i])
}
}
uniq_tmp <- df[, uniq_nam]
uniq_nam
length(unique_df)
nrow(unique_df)
a <- (sapply(df, function(x) length(unique(x))))
b <- names(df)
unique_df <- data.frame(names = b, len = a, row.names = 1:length(b))
uniq_nam <- c()
for(i in 1:nrow(unique_df)){
if(unique_df$len[i] <= unique_no){
uniq_nam <- c(uniq_nam, unique_df$names[i])
}
}
uniq_tmp <- df[, uniq_nam]
sapply(uniq_tmp, function(x)unique(x))
sapply(uniq_tmp, function(x)table(x))
i = 1
i = 10
unique_df$len[i]
unique_df$names
unique_df$names[i]
str(unique_df)
View(unique_df)
df
unique_no
a <- (sapply(df, function(x) length(unique(x))))
b <- names(df)
unique_df <- data.frame(names = b, len = a, row.names = 1:length(b), stringsAsFactors = F)
str(unique_df)
uniq_nam <- c()
for(i in 1:nrow(unique_df)){
if(unique_df$len[i] <= unique_no){
uniq_nam <- c(uniq_nam, unique_df$names[i])
}
}
uniq_tmp <- df[, uniq_nam]
sapply(uniq_tmp, function(x)table(x))
lapply(uniq_tmp, function(x)table(x))
list <- lapply(uniq_tmp, function(x)table(x))
return(list)
unique_freq <- function(df, unique_no)
{
a <- (sapply(df, function(x) length(unique(x))))
b <- names(df)
unique_df <- data.frame(names = b, len = a, row.names = 1:length(b), stringsAsFactors = F)
uniq_nam <- c()
for(i in 1:nrow(unique_df)){
if(unique_df$len[i] <= unique_no){
uniq_nam <- c(uniq_nam, unique_df$names[i])
}
}
uniq_tmp <- df[, uniq_nam]
o_p <- lapply(uniq_tmp, function(x)table(x))
return(o_p)
}
unique_freq(df = tmp, unique_no = 3)
unique_freq(df = tmp_1, unique_no = 5)
tmp_dummy <- tmp[, !(names(tmp) %in% dummy)]
rm(tmp_1)
unique_freq(df = tmp_dummy, unique_no = 10)
require(data.table); require(lubridate); require(caret); require(sqldf); require(xgboost); require(xlsx); require(dplyr); require(readr); require(doParallel); require(bit64)
sum(tmp[1] ==0)
sum(tmp[3] ==0)
sum(tmp[7] ==0)
sum(tmp[369] ==0)
sum(tmp[365] ==0)
sum(tmp[335] ==0)
sum(tmp[325] ==0)
zero_percent <- c()
for(i in 1:ncol(tmp)){
x <- sum(tmp[i] == 0) / nrow(tmp)
zero_percent <- c(zero_percent, x)
}
i
(sum(tmp[i] == 0) / nrow(tmp)) * 100 *%
(sum(tmp[i] == 0) / nrow(tmp)) * 100%
(sum(tmp[i] == 0) / nrow(tmp)) * 100
paste0((sum(tmp[i] == 0) / nrow(tmp)) * 100), %)
paste0((sum(tmp[i] == 0) / nrow(tmp)) * 100), "%")
paste0(a, b)
paste0((sum(tmp[i] == 0) / nrow(tmp)) * 100), "%")
paste0(sum(tmp[i] == 0) / nrow(tmp)) * 100, "%")
(sum(tmp[i] == 0) / nrow(tmp)) * 100
i = 1
(sum(tmp[i] == 0) / nrow(tmp)) * 100
zero_percent <- c()
for(i in 1:ncol(tmp)){
x <- (sum(tmp[i] == 0) / nrow(tmp)) * 100
zero_percent <- c(zero_percent, x)
}
df_zero <- data.frame(name = names(tmp), Z_P = zero_percent )
View(df_zero)
rm(list = ls())
require(data.table); require(lubridate); require(caret); require(sqldf); require(xgboost); require(xlsx); require(dplyr); require(readr); require(doParallel); require(bit64)
Spanish2English <- fread("D:\\kaggle\\SANTANDER\\DATA\\Spanish2English.csv", data.table = F)
train_raw <- fread("D:\\kaggle\\SANTANDER\\DATA\\train.csv", data.table = F)
extra <- cbind.data.frame( ID = train_raw$ID,
var3 = train_raw$var3,
var15 = train_raw$var15,
var38 = train_raw$var38,
TARGET = train_raw$TARGET )
train_raw <- train_raw[, !(names(train_raw) %in% names(extra))]
names(train_raw) <- Spanish2English$English
train_raw <- cbind(train_raw, extra)
test_raw <- fread("D:\\kaggle\\SANTANDER\\DATA\\test.csv", data.table = F)
extra <- cbind.data.frame( ID = test_raw$ID,
var3 = test_raw$var3,
var15 = test_raw$var15,
var38 = test_raw$var38 )
test_raw <- test_raw[, !(names(test_raw) %in% names(extra))]
names(test_raw) <- Spanish2English$English
test_raw <- cbind(test_raw, extra)
response <- train_raw$TARGET
train_raw$TARGET <- NULL
train_raw$ID <- NULL
id <- test_raw$ID
test_raw$ID <- NULL
tmp <- rbind(train_raw, test_raw)
##############################################################################################################
a <- data.frame(sapply(tmp, function(x) length(unique(x))))
devtools::source_gist('4a0a5ab9fe7e1cf3be0e')
b <- strtable(tmp)
c <- lapply(tmp, function(x) (unique(x)))
unique_df <- cbind.data.frame(unique = a$sapply.tmp..function.x..length.unique.x..., b)
unique_df
len_unique <- rep(0, ncol(tmp))
for(i in 1:nrow(unique_df))
{
if(unique_df$unique[i] < 10)
{
len_unique[i] <- unique_df$variable[i]
}
}
len_unique <- len_unique[len_unique != 0]
len_unique
rm(list = sl())
rm(list = ls())
dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
require(data.table)
Spanish2English <- fread("D:\\kaggle\\SANTANDER\\DATA\\Spanish2English.csv", data.table = F)
head(Spanish2English)
x <- c("xgboost", "Matrix", "data.table", "bit64", "doParallel", "caret")
lapply(x, require, character.only = T)
set.seed(03*25*2016)
train <- fread("D:\\kaggle\\SANTANDER\\DATA\\train.csv", data.table = F)
test <- fread("D:\\kaggle\\SANTANDER\\DATA\\test.csv", data.table = F)
library(xgboost); library(data.table); library(doParallel); library(pROC); library(bit64)
set.seed(3*04*14*2016)
train <- fread("D:\\kaggle\\SANTANDER\\DATA\\train.csv", data.table = F)
test  <- fread("D:\\kaggle\\SANTANDER\\DATA\\test.csv", data.table = F)
# Removing IDs-------------------------------------------------------------------------------------------
train$ID <- NULL
test.id <- test$ID
test$ID <- NULL
# Extracting TARGET--------------------------------------------------------------------------------------
train.y <- train$TARGET
train$TARGET <- NULL
# 0 count per line---------------------------------------------------------------------------------------
count0 <- function(x) {
return( sum(x == 0) )
}
train$n0 <- apply(train, 1, FUN=count0)
test$n0 <- apply(test, 1, FUN=count0)
# Removing constant features-----------------------------------------------------------------------------
cat("\n## Removing the constants features.\n")
for (f in names(train)) {
if (length(unique(train[[f]])) == 1) {
cat(f, "is constant in train. We delete it.\n")
train[[f]] <- NULL
test[[f]] <- NULL
}
}
# Removing identical features----------------------------------------------------------------------------
features_pair <- combn(names(train), 2, simplify = F)
toRemove <- c()
for(pair in features_pair) {
f1 <- pair[1]
f2 <- pair[2]
if (!(f1 %in% toRemove) & !(f2 %in% toRemove)) {
if (all(train[[f1]] == train[[f2]])) {
cat(f1, "and", f2, "are equals.\n")
toRemove <- c(toRemove, f2)
}
}
}
feature.names <- setdiff(names(train), toRemove)
# feature.names <- (names(train))
train <- train[, feature.names]
test <- test[, feature.names]
j = 1
print(paste("starting rf iteration ; number :", j))
set.seed(2*05*2016*j)
require(caret)
skf = createFolds(response, k = 5)
skf = createFolds(response, k = 5)
response <- train.y
print(paste("starting rf iteration ; number :", j))
set.seed(2*05*2016*j)
skf = createFolds(response, k = 5)
print(paste(nrow(dataset_blend_test_j),ncol(dataset_blend_test_j)))
print(paste(nrow(dataset_blend_test_j),ncol(dataset_blend_test_j)))
i <- 1
tmp_train <- unlist(skf[i])
x_train = train[-tmp_train,]
y_train = response[-tmp_train]
x_test  = train[tmp_train,]
y_test  = response[tmp_train]
require(h2o)
localH2O <- h2o.init(nthreads = -1, max_mem_size = '12g', assertion = F)
x_train$target <- as.factor(y_train)
train.hex <- as.h2o(x_train)
test.hex <- as.h2o(x_test)
myX <- names(train)
myY <- "target"
print(paste("training rf for iteration : ", j, "Fold ; number :", i))
test_rf <- h2o.randomForest(x = myX,
y = myY,
training_frame = train.hex,
ntrees = 1000,
max_depth = 10,
binomial_double_trees = T,
balance_classes = T
)
pred_rf <- h2o.predict(object = test_rf, newdata = test.hex)
pred_rf <- as.data.frame(pred_rf)
pred_rf$p0
pred_rf$p1
dataset_blend_train = matrix(0, nrow(train), 5)
dataset_blend_test_j = matrix(0, nrow(test), 5) # this should always be number of folds
dataset_blend_test = matrix(0, nrow(test), 5)
# start iteration loop---------------------------------------------------------------------------------
for(j in 1:5)
{
print(paste("starting rf iteration ; number :", j))
set.seed(2*05*2016*j)
sample_train <- sample(x = nrow(train), size = nrow(train), replace = T )
sample_test <- sample(x = nrow(test), size = nrow(test), replace = T )
train <- train[sample_train, ]
test <- train[sample_test, ]
require(caret)
skf = createFolds(response, k = 5)
print(paste(nrow(dataset_blend_test_j),ncol(dataset_blend_test_j)))
# start fold loop------------------------------------------------------------------------------------
### Loop over the folds
i <- 0
for (sk in skf) {
i <- i + 1
print(paste("Fold", i))
### Extract and fit the train/test section for each fold
tmp_train <- unlist(skf[i])
x_train = train[-tmp_train,]
y_train = response[-tmp_train]
x_test  = train[tmp_train,]
y_test  = response[tmp_train]
require(h2o)
localH2O <- h2o.init(nthreads = -1, max_mem_size = '12g', assertion = F)
x_train$target <- as.factor(y_train)
train.hex <- as.h2o(x_train)
test.hex <- as.h2o(x_test)
myX <- names(train)
myY <- "target"
print(paste("training rf for iteration : ", j, "Fold ; number :", i))
test_rf <- h2o.randomForest(x = myX,
y = myY,
training_frame = train.hex,
ntrees = 1000,
max_depth = 10,
binomial_double_trees = T,
balance_classes = T
)
pred_rf <- h2o.predict(object = test_rf, newdata = test.hex)
pred_rf <- as.data.frame(pred_rf)
dataset_blend_train[tmp_train, j] <- pred_rf$p0
print(paste("predicting rf for test set iteration :", j, "; Fold :", i))
test.hex <- as.h2o(test)
pred_rf <- h2o.predict(object = test_rf, newdata = test.hex)
pred_rf <- as.data.frame(pred_rf)
dataset_blend_test_j[, i] <- pred_rf$p0
}
dataset_blend_test[, j] <- rowMeans(dataset_blend_test_j)
}
require(readr)
write_csv(data.frame(dataset_blend_train), "D:\\kaggle\\SANTANDER\\copy\\ENSM\\RF\\TRAIN\\blend_train_rf_04232016_sample.csv")
write_csv(data.frame(dataset_blend_test), "D:\\kaggle\\SANTANDER\\copy\\ENSM\\RF\\TEST\\blend_test_rf_04232016_sample.csv")
