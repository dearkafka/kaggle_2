{
    "contents" : "require(\"h2o\") ;require(\"h2oEnsemble\"); require(\"SuperLearner\"); require(\"cvAUC\")\n\nlibrary(readr); library(xgboost); library(doParallel); library(caret); library(Metrics)\n\nrm(list = ls())\n\ntrain <- read_csv(\"D:/kaggle/Springleaf/DATA/modify/training.csv\")\n\ntest <- read_csv(\"D:/kaggle/Springleaf/DATA/modify/testing.csv\")\n\nset.seed(8675309)\n\ntrain_raw <- read_csv(\"D:/kaggle/Springleaf/DATA/CSV/train.csv\")\n\n# save ID and response\n\ntrain_target <- train_raw$target\n\ntrain_ID <- train_raw$ID\n\ntrain$VAR_0241 <- as.numeric(as.character(train$VAR_0241))\n\ntest_raw <- read_csv(\"D:/kaggle/Springleaf/DATA/CSV/test.csv\")\n\n# save ID and response\n\ntest_ID <- test_raw$ID\n\ntest$VAR_0241 <- as.numeric(as.character(test$VAR_0241))\n\nprint(dim(train)); print(dim(test))\n\nrm(train_raw); rm(test_raw)\n\ngc()\n\nlocalH2O <- h2o.init(max_mem_size = \"10g\")\n\ntrain_target <- as.factor(train_target)\n\ntrain$ID <- train_ID; train$target <- train_target\n\ntest$ID <- test_ID\n\nfeature.names <- names(train[1:(ncol(train) -2) ])\n\ntrain.hex <- as.h2o(localH2O, object = train)\n\ntest.hex <- as.h2o(localH2O, object = test)\n\nsplit <- h2o.runif(train.hex, seed = 1234)\n\ntraining_frame <- h2o.assign(train.hex[split<0.9,], \"training_frame\")\n\nvalidation_frame <- h2o.assign(train.hex[split>=0.9,], \"validation_frame\")\n\n###############################################################################\n\n\n#rf\n\nstart <- Sys.time()\n\ntest_rf <- h2o.randomForest(x = feature.names,\n                            \n                            y = \"target\",\n                            \n                            training_frame = training_frame, \n                            \n                            validation_frame = validation_frame,\n                            \n                            model_id = \"rf_09292015\", \n                            \n                            ntrees = 2000, \n                            \n                            max_depth = 10, \n                            \n                            binomial_double_trees = T, \n                            \n                            balance_classes = T, \n                            \n                            seed = 8675309 \n                            \n)\n\nrf_time <- Sys.time() - start #17.68586 mins #Total - 165.xx mins\n\n######################################################################################################\n\ntest_rf@model$training_metrics@metrics$AUC\n\ntest_rf@model$validation_metrics@metrics$AUC\n\nh2o.performance(model = test_rf, validation_frame)\n\npred_rf <- h2o.predict(object = test_rf, newdata = test.hex)\n\npred_rf <- as.data.frame(pred_rf)\n\nsubmission <- data.frame(ID = test_ID)\n\nsubmission$target <- pred_rf$p1\n\nwrite_csv(submission, \"D:/kaggle/Springleaf/SUBMISSION/rf_09292015.csv\")\n\n\nh2o.saveModel(object = test_rf, path = \"D:/kaggle/Springleaf/rf_09272015\")\n\n\n##PLOT METHOD TO FIND SEE HOW AUC VARIES OVER DIFFERENT TUNING PARAMETERS\n\ntest_rf@model$scoring_history$number_of_trees\n\ntest_rf@model$scoring_history$training_AUC\n\ntest_rf@model$scoring_history$validation_AUC\n\n#Didn`t the graph much\n\nplot(test_rf@model$training_metrics, type = \"roc\", \n     \n     col = \"black\", typ = \"b\")\n\npar(new = T)\n\nplot(test_rf@model$validation_metrics, type = \"roc\", \n     \n     col = \"red\", typ = \"b\", axes = FALSE)\n\n#######################################################################\n\n#Might use a interactive graph to make it more easier to interpret\n\n\nplot(x = test_rf@model$scoring_history$number_of_trees,\n     \n     y = test_rf@model$scoring_history$training_AUC, col = \"red\",\n     \n     typ = \"b\", xlab = \"Number of Trees\", ylab = \"AUC\"\n)\n\npar(new = T)\n\n\nplot(x = test_rf@model$scoring_history$number_of_trees,\n     \n     y = test_rf@model$scoring_history$validation_AUC, col = \"black\",\n     \n     typ = \"b\", axes = F, xlab = \"Number of Trees\", ylab = \"AUC\"\n)\n\n\n\n##############################################################################\n\n#GLM\n\nstart <- Sys.time()\n\ntest_glm <- h2o.glm( x = feature.names,\n                     \n                     y = \"target\",\n                     \n                     training_frame = training_frame,\n                     \n                     validation_frame = validation_frame,\n                     \n                     family = \"binomial\",\n                     \n                     lambda_search = TRUE,\n                     \n                     nlambdas = 10, \n                     \n                     model_id = \"glm_test\", \n                     \n                     solver = \"L_BFGS\",\n                     \n                     keep_cross_validation_predictions = T,\n                     \n                     alpha = c(0, 0.1, 0.2, 0.3, 0.4, 0.6, 0.8, 1), \n                     \n                     link = \"logit\", \n                     \n                     standardize = T \n)\n\nglm_time <- Sys.time() - start #5.086208 mins\n\n\nh2o.saveModel(object = test_glm, path = \"D:\\\\kaggle\\\\Springleaf\\\\glm_09272015\")\n\ntest_glm@model$training_metrics@metrics$AUC\n\ntest_glm@model$validation_metrics@metrics$AUC\n\n#code working\n\n#add validation dataset to check during training \n\n#PREDICTIONS ON TEST DATASET\n\n#SAVE THE PREDICTION VECTOR IN A CSV FILE(09272015_glm)\n\n##############################################################################\n\n\n########################################################################################################\n\n#GBM\n\nstart <- Sys.time()\n\ntest_gbm <- h2o.gbm(x = feature.names,\n                    \n                    y = \"target\",\n                    \n                    training_frame = training_frame,\n                    \n                    validation_frame = validation_frame,\n                    \n                    model_id = \"gbm_09272015\", \n                    \n                    ntrees =  100, \n                    \n                    max_depth = 20, \n                    \n                    learn_rate = 0.014, \n                    \n                    seed = 8675309, \n                    \n                    balance_classes = T, \n                    \n                    min_rows = 9 \n)\n\n\ngbm_time <- Sys.time() - start #1.496173 hours\n\nh2o.saveModel(object = test_gbm, path = \"D://kaggle//Springleaf//gbm_09282015\")\n\n#code working\n\n\n#add validation dataset to check during training \n\ntest_gbm@model$training_metrics@metrics$AUC #Now showing AUC on train\n\ntest_gbm@model$scoring_history$number_of_trees\n\ntest_gbm@model$scoring_history$training_AUC\n\ntest_gbm@model$scoring_history$validation_AUC\n\n\n\n########################################################################################################\n\n\n#####################################################################################################\n\ntest_gbm@model$training_metrics@metrics$AUC\n\nh2o.performance(model = test_gbm, validation_frame)\n\npred_gbm <- h2o.predict(object = test_gbm, newdata = test.hex)\n\nsubmission <- data.frame(ID = test_ID)\n\nsubmission$target <- pred_gbm\n\nwrite_csv(submission, \"D:/kaggle/Springleaf/SUBMISSION/gbm_09272015.csv\")\n\n#####################################################################################################\n\ntest_glm@model$training_metrics@metrics$AUC\n\nh2o.performance(model = test_glm, validation_frame)\n\npred_glm <- h2o.predict(object = test_glm, newdata = test.hex)\n\npred_glm <- as.data.frame(pred_glm)\n\nsubmission <- data.frame(ID = test_ID)\n\nsubmission$target <- pred_glm$p1\n\nwrite_csv(submission, \"D:/kaggle/Springleaf/SUBMISSION/glm_09272015.csv\")\n\n\n###################################################################################################",
    "created" : 1444671096602.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3920814646",
    "id" : "35703CDC",
    "lastKnownWriteTime" : 1443500264,
    "path" : "D:/kaggle/Springleaf/H2O_WRKNG_FILES.R",
    "project_path" : "H2O_WRKNG_FILES.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}