{
    "contents" : "\n# start after creating train and test datasets----------------------------------------------------------\n\ntrain$target <- response\n\n# creating 40% holdout\n\nsplit <- createDataPartition(y = train$target, p = 0.6, list = F)\n\n\ntraining <- train[split, ]; training$target <- NULL\n\nresponse_tr <- response[split]\n\nholdout <- train[-split, ]; holdout$target <- NULL\n\nresponse_hol <- response[-split]\n\nh <- sample(nrow(training), 10000)\n\ndval<-xgb.DMatrix(data=data.matrix(training[h,]),label=response_tr[h])\n\ndtrain<-xgb.DMatrix(data=data.matrix(training[-h,]),label=response_tr[-h])\n\nwatchlist<-list(val=dval,train=dtrain)\n\nfor( depth in c(8, 9, 10))\n\n{\n\n  param <- list(\n    \n    # general , non specific params - just guessing\n    \n    \"objective\"  = \"binary:logistic\"\n    \n    , \"eval_metric\" = \"logloss\"\n    \n    , \"eta\" = 0.01\n    \n    , \"subsample\" = 1\n    \n    , \"colsample_bytree\" = 0.2\n    \n    , \"min_child_weight\" = 5\n    \n    , \"max_depth\" = depth\n  )\n  \n  \n  start <- Sys.time()\n  \n  cl <- makeCluster(4); registerDoParallel(cl)\n  \n  set.seed(1*14*16)\n  \n  # train----------------------------------------------------------------------------------------------\n  \n  clf <- xgb.train(   params              = param,\n                      \n                      data                = dtrain,\n                      \n                      nrounds             = 10000,\n                      \n                      verbose             = 1,  #1\n                      \n                      early.stop.round    = 1500,\n                      \n                      watchlist           = watchlist,\n                      \n                      maximize            = F,\n                      \n                      nthread = 4\n                      \n  )\n  \n  \n  # local validation------------------------------------------------------------------------------------\n  \n  pred <- predict(clf, data.matrix(holdout[,feature.names]))\n  \n  # LogLoss Function\n  \n  LogLoss <- function(actual, predicted, eps=0.00001) {\n    \n    predicted <- pmin(pmax(predicted, eps), 1-eps)\n    \n    -1/length(actual)*(sum(actual*log(predicted)+(1-actual)*log(1-predicted)))\n    \n  }\n  \n  val = LogLoss(response_hol, pred)\n\n  eval <- c()\n  \n  eval <- c(eval, val)\n    \n  print(paste(\"the value of LogLoss on 40% holdout for value of\", depth, \"is\", val ))\n  \n  \n}",
    "created" : 1457842677459.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2124685057",
    "id" : "100652A5",
    "lastKnownWriteTime" : 1457921618,
    "path" : "D:/kaggle/BNP/CODE/tune.R",
    "project_path" : "CODE/tune.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}