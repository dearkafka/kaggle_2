{
    "contents" : "\nset.seed(02*14*2016)\n\n# read in the data file--------------------------------------------------------------------------------\n\nrequire(data.table); require(xgboost); require(h2o); require(caret)\n\n\ntrain <- fread(\"D:\\\\kaggle\\\\PRUDENTIAL\\\\Data\\\\train.csv\", data.table = F)\n\ntest <- fread(\"D:\\\\kaggle\\\\PRUDENTIAL\\\\Data\\\\test.csv\", data.table = F)\n\n\ntrain_id <- train$Id\n\ntrain$Id <- NULL;\n\nid <- test$Id; test$Id <- NULL\n\nresponse <- train$Response; train$Response <- NULL\n\n\ntmp <- rbind(train, test)\n\n\nrow_NA <- apply(tmp, 1, function(x) sum(is.na(x)))\n\ntmp$row_NA <- row_NA\n\n\n# # new feature engg found in high performing script----------------------------------------------------------\n# \n# first <- c()\n# \n# char <- as.character(tmp$Product_Info_2)\n# \n# for(i in 1:length(tmp$Product_Info_2))\n#   \n# {\n#   \n#   first[i] <- substr(char[i], 1, 1) \n#   \n# }\n# \n# \n# tmp$first <- first\n# \n# \n# second <- c()\n# \n# for(i in 1:length(tmp$Product_Info_2))\n#   \n# {\n#   \n#   second[i] <- substr(char[i], 2, 2) \n#   \n# }\n# \n# \n# tmp$second <- second\n# \n\n\n# dummify varible------------------------------------------------------------------------------\n\ndummy <- c(\"Product_Info_2\")\n\ntmp_dummy <- data.frame(tmp[,\"Product_Info_2\"])\n\ntmp_dummy[ , 1] <- as.factor(tmp_dummy[ , 1])\n\n\ndummies <- dummyVars( ~ ., data = tmp_dummy)\n\ngc()\n\ntmp_dummy <- predict(dummies, newdata = tmp_dummy)\n\ntmp_dummy <- data.frame(tmp_dummy)\n\ndim(tmp_dummy)\n\n\n# count the number of keywords row wise--------------------------------------------------------\n\nkeywords <- paste(\"Medical_Keyword_\", 1:48, sep=\"\")\n\ntmp_count <- tmp[, keywords]\n\n\ncount <- apply(tmp_count, 1, function(x) sum(x))\n\ntmp$count <- count\n\n\n##############################################################################################\n\n\n\ntmp[is.na(tmp)] <- -1\n\ntmp_new <- cbind(tmp, tmp_dummy)\n\n# interaction features-------------------------------------------------------------------------\n\n# require(readr)\n# \n# imp_mat <- read_csv(\"D:\\\\kaggle\\\\PRUDENTIAL\\\\Data\\\\imp_mat_raw.csv\")\n# \n# top5 <- imp_mat$Feature[1:5]\n\ntmp_int <- tmp[ , c(\"Ins_Age\", \"BMI\")]\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    #    a = i; b= j\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_plus_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] + tmp_int[, j]\n    \n  }\n}\n\n\ngc()\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\n#####################################################################################################\n\ntmp_int <- tmp[ , c(\"Ins_Age\", \"BMI\")]\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_minus_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] - tmp_int[, j]\n    \n  }\n}\n\n\ngc()\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\n#####################################################################################################\n\ntmp_int <- tmp[ , c(\"Ins_Age\", \"BMI\")]\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_mult_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] * tmp_int[, j]\n    \n  }\n}\n\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n\ntmp_new <- tmp_new[, !(names(tmp_new) %in%  c(\"Ins_Age\", \"BMI\"))]\n\ntmp_int <- tmp[ , c(\"Ins_Age\", \"BMI\")]\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\n#####################################################################################################\n\ntmp_new$Medical_History_10 <- NULL\n\ntmp_new$Medical_History_24 <- NULL\n\n\n############################################################################################################\n\n\n\nfeature.names <- names(tmp_new)\n\nfor (f in feature.names) {\n  \n  if (class(tmp_new[[f]])==\"character\") {\n    \n    levels <- unique(c(tmp_new[[f]]))\n    \n    tmp_new[[f]] <- as.integer(factor(tmp_new[[f]], levels=levels))\n    \n  }\n}\n\n\n# tmp_new <- cbind(tmp_new, tmp_dummy)\n\n# tmp_new <- tmp_new[ , !(names(tmp_new) %in% c(\"Product_Info_2\"))]\n\n\n\n# trying a Rtsne to help with------------------------------------------------------------------\n\n\nrequire(Rtsne)\n\nboth = as.matrix(tmp_new)\n\ngc()\n\nboth = both-1\n\ntsne <- Rtsne(both, check_duplicates = FALSE, pca = FALSE, verbose=TRUE,\n              perplexity=30, theta=0.5, dims=2)\n\ntmp_new <- cbind(tmp_new, tsne$Y)\n\ntrain <- tmp_new[c(1:59381),]\n \ntest <- tmp_new[c(59382:79146),]\n\n",
    "created" : 1455499023122.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "550296670",
    "id" : "7BA3EBF0",
    "lastKnownWriteTime" : 1455469720,
    "path" : "D:/kaggle/PRUDENTIAL/blend/read_data.R",
    "project_path" : "blend/read_data.R",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "type" : "r_source"
}