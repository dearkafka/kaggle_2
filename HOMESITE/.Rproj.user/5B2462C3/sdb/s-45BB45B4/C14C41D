{
    "contents" : "install.packages(\"doParallel\"); install.packages(\"h2o\"); install.packages(\"readr\")\n\nrequire(doParallel); require(h2o); require(caret); require(readr)\n\ndetectCores()\n\ntrain <- read_csv(\"train_01262016.csv\")\n\ntest <- read_csv(\"test_01262016.csv\")\n\nresponse_1 <- read_csv(\"response_01262016.csv\")\n\nresponse <- response_1$response\n\n# create folds------------------------------------------------------------------------------------------\n\ndataset_blend_train = matrix(0, nrow(train), 1)\n\ndataset_blend_test_j = matrix(0, nrow(test), 2) # this hould always be number of folds\n\ndataset_blend_test = matrix(0, nrow(test), 1)\n\n# start iteration loop---------------------------------------------------------------------------------\n\nj = 1\n\nprint(paste(\"starting gbm iteration ; number :\", j))\n\nset.seed(2*05*2016*j)\n\nrequire(caret)\n\nskf = createFolds(response, k = 2)\n\nprint(paste(nrow(dataset_blend_test_j),ncol(dataset_blend_test_j)))\n\n# start fold loop------------------------------------------------------------------------------------\n\n### Loop over the folds\n\ni <- 0\n\nfor (sk in skf) {\n  \n  i <- i + 1\n  \n  print(paste(\"Fold\", i))\n  \n  ### Extract and fit the train/test section for each fold\n  \n  tmp_train <- unlist(skf[i])\n  \n  x_train = train[-tmp_train,]\n  \n  y_train = response[-tmp_train]\n  \n  x_test  = train[tmp_train,]\n  \n  y_test  = response[tmp_train]\n  \n  \n  require(h2o)\n  \n  localH2O <- h2o.init(nthreads = 36, assertion = F)\n  \n  x_train$target <- as.factor(y_train)\n  \n  train.hex <- as.h2o(localH2O, object = x_train)\n  \n  test.hex <- as.h2o(localH2O, object = x_test)\n  \n  \n  myX <- names(train)\n  \n  myY <- \"target\"\n  \n  print(paste(\"training gbm for iteration :\", j, \" Fold ; number :\", i))\n  \n  \n  test_gbm <- h2o.gbm(x = myX,\n                      \n                      y = myY,\n                      \n                      training_frame = train.hex, \n                      \n                      ntrees =  2000, \n                      \n                      max_depth = 10, \n                      \n                      learn_rate = 0.014,\n                      \n                      distribution=\"bernoulli\", \n                      \n                      balance_classes = T\n  )\n  \n  \n  pred_gbm <- h2o.predict(object = test_gbm, newdata = test.hex)\n  \n  pred_gbm <- as.data.frame(pred_gbm)\n  \n  dataset_blend_train[tmp_train, j] <- pred_gbm$p1\n  \n  print(paste(\"predicting gbm for test set iteration :\", j,  \"; Fold :\", i))\n  \n  test.hex <- as.h2o(localH2O, object = test)\n  \n  pred_gbm <- h2o.predict(object = test_gbm, newdata = test.hex)\n  \n  pred_gbm <- as.data.frame(pred_gbm)\n  \n  dataset_blend_test_j[, i] <- pred_gbm$p1\n  \n}\n\ndataset_blend_test[, j] <- rowMeans(dataset_blend_test_j)\n\n\nrequire(readr)\n\nwrite_csv(data.frame(dataset_blend_train), \"blend_train_gbm_02062016.csv\")\n\nwrite_csv(data.frame(dataset_blend_test), \"blend_test_gbm_02062016.csv\")",
    "created" : 1454657919582.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "820182876",
    "id" : "C14C41D",
    "lastKnownWriteTime" : 1454762269,
    "path" : "D:/kaggle/HOMESITE/aws_02052016.R",
    "project_path" : "aws_02052016.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_source"
}