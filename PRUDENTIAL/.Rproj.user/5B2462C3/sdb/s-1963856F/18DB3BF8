{
    "contents" : "\nblend_train <- read_csv(\"D:\\\\kaggle\\\\PRUDENTIAL\\\\blend\\\\bag\\\\train_01232016.csv\")\n\nblend_test <- read_csv(\"D:\\\\kaggle\\\\PRUDENTIAL\\\\blend\\\\bag\\\\test_01232016.csv\")\n\ntrain <- cbind(train, blend_train)\n\ntest <- cbind(test, blend_test)\n\n\n# train a second level using xgboost-------------------------------------------------------------\n\n## use crossval setup to get optimum cutpoints equation\n\nrequire(caret); require(xgboost)\n\nset.seed(01242016)\n\nskf = createFolds(response, k = 5 )\n\ndataset_blend_train  = matrix(0, nrow(train), 1)\n\n### Loop over the folds\n\ni <- 0\n\nfor (sk in skf) {\n  \n  i <- i + 1\n  \n  print(paste(\"Fold\", i))\n  \n  \n  ### Extract and fit the train/test section for each fold\n  \n  tmp_train <- unlist(skf[i])\n  \n  x_train = train[-tmp_train, ]\n  \n  y_train = response[-tmp_train]\n  \n  x_test  = train[tmp_train,]\n  \n  y_test  = response[tmp_train]\n  \n  \n  dtrain <- xgb.DMatrix(data = data.matrix(x_train),label = y_train, missing = NaN )\n  \n  param <- list(  print.every.n       = 20,\n                  \n                  objective           = \"reg:linear\",\n                  \n                  depth = 21,\n                  \n                  min_child_weight = 3,\n                  \n                  subsample = 0.71,\n                  \n                  eta = 0.01,\n                  \n                  silent = 0\n                  \n  )\n  \n  \n  mod <- xgb.train(   params              = param,\n                      \n                      booster = \"gbtree\",\n                      \n                      data                = dtrain,\n                      \n                      nrounds             = 3000,\n                      \n                      verbose             = 1,\n                      \n                      maximize            = F\n                      \n  )\n  \n  \n  dataset_blend_train[tmp_train, 1] <- predict(mod, data.matrix(x_test), missing = NaN)\n  \n}\n\n\n#############################################################################################################\n\n\nSQWKfun = function(x = seq(1.5, 7.5, by = 1), pred) {\n  preds = pred$predict\n  true = pred$Response\n  cuts = c(min(preds), x[1], x[2], x[3], x[4], x[5], x[6], x[7], max(preds))\n  preds = as.numeric(Hmisc::cut2(preds, cuts))\n  err = Metrics::ScoreQuadraticWeightedKappa(preds, true, 1, 8)\n  return(-err)\n}\n\n# optimise using optim on train and predict on test---------------------------------------------- \n\npred = data.frame(Id=train_id, Response=response, predict=dataset_blend_train)\n\n# on further iterations instead of using oof preds, actual train preds may be used | {might overfit}\n\noptCuts = optim(seq(1.5, 7.5, by = 1), SQWKfun, pred = pred)\n\nprint(optCuts)\n\n\n# predict using optimal cut points---------------------------------------------------------------\n\ndtrain <- xgb.DMatrix(data = data.matrix(train),label = response, missing = NaN )\n\nparam <- list(  print.every.n       = 20,\n                \n                objective           = \"reg:linear\",\n                \n                depth = 21,\n                \n                min_child_weight = 3,\n                \n                subsample = 0.71,\n                \n                eta = 0.01,\n                \n                silent = 0\n                \n)\n\n\n\nstart <- Sys.time()\n\n\nmod <- xgb.train(   params              = param,\n                    \n                    booster = \"gbtree\",\n                    \n                    data                = dtrain,\n                    \n                    nrounds             = 3000,\n                    \n                    verbose             = 1,\n                    \n                    maximize            = F\n                    \n)\n\npredict_test = predict(mod, data.matrix((test)), missing = NaN)\n\npreds = as.numeric(Hmisc::cut2(predict_test, c(-Inf, optCuts$par, Inf)))\n\n\n\n## create submission file-----------------------------------------------------------------------\n\nsubmission = data.frame(Id = id)\n\nsubmission$Response = as.integer(preds)\n\nwrite_csv(submission, \"D:\\\\kaggle\\\\PRUDENTIAL\\\\submission\\\\01252016.csv\")\n\n",
    "created" : 1453576200902.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1659308237",
    "id" : "18DB3BF8",
    "lastKnownWriteTime" : 1453576808,
    "path" : "D:/kaggle/PRUDENTIAL/version_control/optim.R",
    "project_path" : "version_control/optim.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}