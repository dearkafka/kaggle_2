{
    "contents" : "\nrequire(data.table); require(lubridate); require(caret); require(sqldf); require(xgboost); require(xlsx); require(dplyr); require(readr); require(doParallel); require(bit64)\n\nSpanish2English <- fread(\"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\Spanish2English.csv\", data.table = F)\n\ntrain_raw <- fread(\"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\train.csv\", data.table = F)\n\nextra <- cbind.data.frame( ID = train_raw$ID, \n                         \n                         var3 = train_raw$var3, \n                         \n                         var15 = train_raw$var15, \n                         \n                         var38 = train_raw$var38, \n                         \n                         TARGET = train_raw$TARGET )\n\ntrain_raw <- train_raw[, !(names(train_raw) %in% names(extra))]\n\nnames(train_raw) <- Spanish2English$English\n\ntrain_raw <- cbind(train_raw, extra)\n\n\ntest_raw <- fread(\"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\test.csv\", data.table = F)\n\nextra <- cbind.data.frame( ID = test_raw$ID, \n                         \n                         var3 = test_raw$var3, \n                         \n                         var15 = test_raw$var15, \n                         \n                         var38 = test_raw$var38 )\n\ntest_raw <- test_raw[, !(names(test_raw) %in% names(extra))]\n\nnames(test_raw) <- Spanish2English$English\n\ntest_raw <- cbind(test_raw, extra)\n\n\n##############################################################################################################\n\n\nresponse <- train_raw$TARGET\n\ntrain_raw$TARGET <- NULL\n\ntrain_raw$ID <- NULL\n\n\nid <- test_raw$ID\n\ntest_raw$ID <- NULL\n\ntmp <- rbind(train_raw, test_raw)\n\n\n##############################################################################################################\n# # categorical and discrete are grouped into a single group \n# \n# categorical_vars <- c()\n# \n# remove_vars <- c(\"PropertyField6\", \"GeographicField10A\")\n# \n# \n# tmp <- tmp[, !(names(tmp) %in% remove_vars)]\n# \n# \n# tmp$Original_Quote_Date <- as.Date(tmp$Original_Quote_Date)\n# \n# tmp$month <- as.integer(format(tmp$Original_Quote_Date, \"%m\"))\n# \n# tmp$year <- as.integer(format(tmp$Original_Quote_Date, \"%y\"))\n# \n# tmp$day <- weekdays(as.Date(tmp$Original_Quote_Date))\n# \n# tmp$week <- week((as.Date(tmp$Original_Quote_Date)))\n# \n# tmp$date <- (((tmp$year * 52 ) + tmp$week) %% 4)\n# \n##############################################################################################################\n\n# seperate categoricals and continous vars--------------------------------------------------------------------\n\na <- data.frame(sapply(tmp, function(x) length(unique(x))))\n\nb <- strtable(tmp)\n\nc <- lapply(tmp, function(x) (unique(x)))\n\nunique_df <- cbind.data.frame(unique = a$sapply.tmp..function.x..length.unique.x..., b)\n\nwrite_csv(unique_df, \"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\unique_df.csv\")\n\n\n# unable to export-------------------------------------------------------------------------------------------\n\nwrite_csv(c, \"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\unique_val.csv\")\n\n\n# len_unique <- rep(0, ncol(tmp))\n# \n# for(i in 1:length(a))\n# \n#   {\n#   \n#   if(a[[i]] < 30) {\n#     \n#     len_unique[i] <- (names(a[i]))\n#   }\n#   \n# }\n# \n# len_unique <- len_unique[len_unique != 0]\n# \n# tmp_unique <- tmp[, len_unique]\n# \n# \n# \n# tmp[is.na(tmp)] <- -1\n# \n# row_NA <- apply(tmp, 1, function(x) sum(x == -1))\n# \n# tmp$row_NA <- row_NA\n# \n\n# seperate character columns\n\nchar <- rep(0, length(names(tmp)))\n\nfor(i in names(tmp))\n  \n{\n  if(class(tmp[, i]) == \"character\"){\n    \n    char <- c(char, i)\n  }\n  \n  char <- char[char != 0 ]\n}\n\n# convert char columns to factors to dummify them\n\ntmp_char <- tmp[, char]\n\n# rm(tmp_unique)\n\nfor(f in names(tmp_char)){\n  \n  levels <- unique(tmp_char[, f])\n  \n  tmp_char[,f] <- factor(tmp_char[,f], levels = levels)\n  \n}\n\n\ndummies <- dummyVars( ~., data = tmp_char)\n\ntmp_char <- predict(dummies, newdata = tmp_char)\n\ntmp_char <- data.frame(tmp_char)\n\nrm(dummies)\n\ngc()\n\n\nfor (f in names(tmp)) {\n  \n  if (class(tmp[[f]])==\"character\") {\n    \n    levels <- unique(tmp[[f]])\n    \n    tmp[[f]] <- as.integer(factor(tmp[[f]], levels=levels))\n    \n  }\n  \n}\n\n\n#################################################################################################\n\nhigh_card <- c(\"PersonalField16\", \"PersonalField17\", \"PersonalField14\", \"PersonalField18\", \"PersonalField19\" )\n\ntmp_high_card <- tmp[, high_card]\n\n\nstr(tmp_high_card, list.len = 999)\n\n\ncat(\"assuming text variables are categorical & replacing them with numeric ids\\n\")\n\nfor (f in names(tmp_high_card)) {\n  \n  if (class(tmp_high_card[[f]])==\"character\") {\n    \n    levels <- unique(c(tmp[[f]]))\n    \n    tmp_high_card[[f]] <- as.integer(factor(tmp_high_card[[f]], levels=levels))\n    \n  }\n}\n\n\nstr(tmp_high_card, list.len = 999)\n\n\n# converting to factors\n\nlen = length(names(tmp_high_card))\n\nfor (i in 1:len) {\n  \n  print(paste0( i / (len) *100, \"%\"))\n  \n  tmp_high_card[ , i] <- as.factor(tmp_high_card[ , i])\n  \n}\n\n\n# counts ;\n\n\ntmp_factors <- tmp_high_card\n\n\n# 2 way count\n\nnms <- combn(names(tmp_factors), 2)\n\ndim(nms)\n\nnms_df <- data.frame(nms) \n\nlen = length(names(nms_df))\n\nfor (i in 1:len) {\n  \n  nms_df[, i] <- as.character(nms_df[, i])\n  \n}\n\ntmp_count <- data.frame(id = 1:dim(tmp)[1])\n\n\nfor(i in 1:dim(nms_df)[2]){\n  \n  #new df \n  \n  print(paste0(((i / dim(nms_df)[2]) * 100), \"%\"))\n  \n  tmp_count[, paste(names(nms_df)[i], \"_two\", sep=\"\")] <- my.f2cnt(th2 = tmp_high_card, \n                                                                   \n                                                                   vn1 = nms_df[1,i], \n                                                                   \n                                                                   vn2 = nms_df[2,i] )\n  \n}\n\n\n#3 way count\n\nnms <- combn(names(tmp_factors), 3)\n\ndim(nms)\n\nnms_df <- data.frame(nms); #nms_df <- nms_df[ c(1:3), c(1:100)]\n\n\nlen = length(names(nms_df))\n\nfor (i in 1:len) {\n  \n  print(paste0(((i / len) * 100), \"%\"))\n  \n  nms_df[, i] <- as.character(nms_df[, i])\n  \n}\n\nfor(i in 1:dim(nms_df)[2]){\n  \n  #new df \n  \n  print(paste0(((i / dim(nms_df)[2]) * 100), \"%\"))\n  \n  tmp_count[, paste(names(nms_df)[i], \"_three\", sep=\"\")] <- my.f3cnt(th2 = tmp_high_card, \n                                                                     \n                                                                     vn1 = nms_df[1,i], \n                                                                     \n                                                                     vn2 = nms_df[2,i], \n                                                                     \n                                                                     vn3 = nms_df[3,i])\n  \n}\n\n\n#one way count\n\nlen = length(names(tmp_factors))\n\nfor(i in 1:len){\n  \n  \n  print(paste0(((i / len) * 100), \"%\") )\n  \n  tmp_factors$x <- tmp_factors[, i]\n  \n  sum1 <- sqldf(\"select x, count(1) as cnt\n                \n                from tmp_factors  group by 1 \")\n  \n  tmp1 <- sqldf(\"select cnt from tmp_factors a left join sum1 b on a.x=b.x\")\n  \n  tmp_count[, paste(names(tmp_factors)[i], \"_cnt\", sep=\"\")] <- tmp1$cnt\n  \n}\n\n##################################################################################################\n\ntmp_cont <- tmp[, continous_vars]\n\ntmp_cont$Original_Quote_Date <- NULL\n\ntmp_pre <-  preProcess(tmp_cont, method = (\"BoxCox\"))\n\ntmp_cont_new <- predict(tmp_pre, tmp_cont)\n\n\n\n###################################################################################################\n\ntmp <- tmp[, !(names(tmp) %in% c(continous_vars))]\n\ntmp_new <- cbind(tmp, tmp_char, tmp_cont_new)\n\n\nrm(test_raw); rm(train_raw); rm(tmp_char)\n\n\n#############################################################################################\n\n\n# add interaction terms\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n#############################################################################################\n\n# plus interaction\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    #    a = i; b= j\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_plus_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] + tmp_int[, j]\n    \n  }\n}\n\n\ngc()\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n############################################################################################\n\n\n# create - interaction features\n\n\n# add interaction terms\n\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_minus_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] - tmp_int[, j]\n    \n  }\n}\n\n\ngc()\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n#############################################################################################\n\n\n# create * interaction features\n\n\n# add interaction terms\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_mult_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] * tmp_int[, j]\n    \n  }\n}\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n#############################################################################################\n\n# create ^ interaction features\n\n# not using division interaction features - NA's\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_order_', var.y)\n    \n    tmp_int[, paste0(var.new)] <- (tmp_int[, i] * tmp_int[, j]) ^ 2\n    \n  }\n}\n\n\n#############################################################################################\n\n# NA terms test\n\na <- lapply(tmp_int, function(x) sum(is.na(x)))\n\n\nlen_unique <- rep(0, ncol(tmp_int))\n\nfor(i in 1:length(a))\n{\n  if(a[[i]]  != 0) {\n    \n    len_unique[i] <- (names(a[i]))\n  }\n  \n}\n\nlen_unique <- len_unique[len_unique != 0]\n\n\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n##################################################################################################\n\n\n# create 3^ interaction features\n\n# not using division interaction features - NA's\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_orderss_', var.y)\n    \n    tmp_int[, paste0(var.new)] <- (tmp_int[, i] * tmp_int[, j]) ^ 3\n    \n  }\n}\n\n\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n##################################################################################################\n\n# getting NA's with the below code\n\n# create 4^ interaction features\n\n# not using division interaction features - NA's\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, 'four_orderss_', var.y)\n    \n    tmp_int[, paste0(var.new)] <- (tmp_int[, i] * tmp_int[, j]) ^ 4\n    \n  }\n}\n\na <- lapply(tmp_int, function(x) sum(is.na(x)))\n\n\nlen_unique <- rep(0, ncol(tmp_int))\n\nfor(i in 1:length(a))\n{\n  if(a[[i]]  != 0) {\n    \n    len_unique[i] <- (names(a[i]))\n  }\n  \n}\n\nlen_unique <- len_unique[len_unique != 0]\n\n\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n##############################################################################################\n\ntmp_new <- tmp_new[, !(names(tmp_new) %in% top_50)]\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int); rm(tmp)\n\n\n##################################################################################\n\nrm(tmp); rm(test_raw); rm(train_raw); rm(tmp_char); rm(tmp_int); rm(imp)\n\n\ntrain <- tmp_new[c(1:260753), ]\n\ntest <- tmp_new[c(260754:434589), ]\n\nrm(tmp_new)\n\ngc()\n\n#train[is.na(train)] <- -1\n\n#test[is.na(test)] <- -1\n\n\nwrite_csv(train, \"D:\\\\kaggle\\\\HOMESITE\\\\Data\\\\New_folder\\\\train_01262016.csv\")\n\nwrite_csv(test, \"D:\\\\kaggle\\\\HOMESITE\\\\Data\\\\New_folder\\\\test_01262016.csv\")\n\n###################################################################################################\n\nfeature.names <- names(train)\n\nh<-sample(nrow(train),2000)\n\ndval<-xgb.DMatrix(data=data.matrix(train[h,]),label=response[h])\n\ndtrain<-xgb.DMatrix(data=data.matrix(train[-h,]),label=response[-h])\n\n#dtrain<-xgb.DMatrix(data=data.matrix(train),label=response, )\n\nwatchlist<-list(val=dval,train=dtrain)\n\nparam <- list(  objective           = \"binary:logistic\", \n                \n                booster = \"gbtree\",\n                \n                eval_metric = \"auc\",\n                \n                eta                 = 0.023, # 0.06, #0.01,\n                \n                max_depth           = 6, #changed from default of 8\n                \n                subsample           = 0.83, # 0.7\n                \n                colsample_bytree    = 0.77, # 0.7\n                \n                num_parallel_tree = 2\n                \n)\n\nstart <- Sys.time()\n\nrequire(doParallel)\n\ncl <- makeCluster(2); registerDoParallel(cl)\n\nset.seed(12*25*15)\n\n#cv <- xgb.cv(params = param, data = dtrain, \n\n#            nrounds = 1800, \n\n#           nfold = 4, \n\n#          showsd = T, \n\n#         maximize = F)\n\nclf <- xgb.train(   params              = param,\n                    \n                    data                = dtrain,\n                    \n                    nrounds             = 3000,\n                    \n                    verbose             = 1,  #1\n                    \n                    #early.stop.round    = 150,\n                    \n                    watchlist           = watchlist,\n                    \n                    maximize            = T,\n                    \n                    nthread = 2)\n\nxgb.save(clf, \"D:\\\\kaggle\\\\HOMESITE\\\\models\\\\12252015_1.R\")\n\nrm(submission)\n\npred <- predict(clf, data.matrix(test[,feature.names]), ntreelimit = 2000)\n\nsubmission <- data.frame(QuoteNumber = id, QuoteConversion_Flag = pred)\n\nwrite_csv(submission, \"D:\\\\kaggle\\\\HOMESITE\\\\submission\\\\12072015\\\\12252015_2.csv\")\n\ntime_taken <- Sys.time() - start",
    "created" : 1458911683190.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2626864433",
    "id" : "11421C1",
    "lastKnownWriteTime" : 1458981634,
    "path" : "D:/kaggle/SANTANDER/CODE/03252016.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}