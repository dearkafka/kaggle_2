{
    "contents" : "x <- c(\"xgboost\", \"Matrix\", \"data.table\", \"bit64\", \"doParallel\", \"caret\")\n\nlapply(x, require, character.only = T)\n\nset.seed(03*25*2016)\n\ntrain <- fread(\"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\train.csv\", data.table = F)\n\ntest <- fread(\"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\test.csv\", data.table = F)\n\n## removing IDs---------------------------------------------------------------------------------\n\ntrain$ID <- NULL\n\nID <- test$ID\n\ntest$ID <- NULL\n\n## extracting TARGET---------------------------------------------------------------------------\n\nresponse <- train$TARGET\n\ntrain$TARGET <- NULL\n\n## zero count per line-------------------------------------------------------------------------\n\ncount0 <- function(x) {\n\n    return( sum(x == 0) )\n}\n\ntrain$n0 <- apply(train, 1, FUN=count0)\n\ntest$n0 <- apply(test, 1, FUN=count0)\n\n\n## removing constant features------------------------------------------------------------------\n\ncat(\"\\n## Removing the constants features. ##\\n\")\n\ncat(\"assuming text variables are categorical & replacing them with numeric ids\\n\")\n\nfeature.names <- names(train)\n\nfor(f in feature.names) {\n  \n  if(class(train[[f]]) == \"character\") {\n    \n    levels <- unique(c(train[[f]], test[[f]]))\n    \n    train[[f]] <- as.integer(factor(train[[f]], levels=levels))\n    \n    test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))\n  }\n}\n\n\nfor(f in names(train)) {\n  \n  if (length(unique(train[[f]])) == 1) {\n    \n    cat(f, \"is constant in train. We delete it.\\n\")\n    \n    train[[f]] <- NULL\n    \n    test[[f]] <- NULL\n  }\n}\n\n\ntrain <- train[, feature.names]\n\ntest <- test[, feature.names]\n\n#train$TARGET <- response\n\n\n#train <- sparse.model.matrix(TARGET ~ ., data = train)\n\ndtrain <- xgb.DMatrix(data=data.matrix(train), label=response, missing = NaN)\n\nwatchlist <- list(train=dtrain)\n\ncl <- makeCluster(4); registerDoParallel(cl) \n\nparam <- list(  objective           = \"binary:logistic\", \n                \n                booster             = \"gbtree\",\n                \n                eval_metric         = \"auc\",\n                \n                eta                 = 0.02,\n                \n                max_depth           = 5,\n                \n                subsample           = 0.7,\n                \n                colsample_bytree    = 0.7\n)\n\nclf <- xgb.train(   params              = param, \n                    \n                    data                = dtrain, \n                    \n                    nrounds             = 1000, \n                    \n                    verbose             = 2,\n                    \n                   watchlist           = watchlist,\n                    \n                    maximize            = FALSE\n)\n\n# \n# cv <- xgb.cv(params = param, \n#        \n#        data = dtrain, \n#        \n#        nrounds = 500, \n#        \n#        nfold = 10, \n#        \n#        prediction = T, \n#        \n#        showsd = T, \n#        \n#        maximize = T,\n#        \n#        nthread = 4)\n# \n\ntest$TARGET <- -1\n\n#test <- sparse.model.matrix(TARGET ~ ., data = test)\n\npreds <- predict(clf, data.matrix(test), missing = NaN)\n\nsubmission <- data.frame(ID=ID, TARGET=preds)\n\ncat(\"saving the submission file\\n\")\n\nwrite.csv(submission, \"D:\\\\kaggle\\\\SANTANDER\\\\SUBMISSION\\\\submission_1.csv\", row.names = F)\n\n# importance matrix--------------------------------------------------------------------------\n\nimportance_matrix <- xgb.importance(feature_names = names(train), model = clf)\n\njpeg(filename = \"D:\\\\kaggle\\\\SANTANDER\\\\Plots\\\\imp_03252016.jpeg\")\n\nxgb.plot.importance(importance_matrix = importance_matrix[1:20, ])\n\ndev.off()\n  ",
    "created" : 1458483312967.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3151055087",
    "id" : "426D41B5",
    "lastKnownWriteTime" : 1458903325,
    "path" : "D:/kaggle/SANTANDER/CODE/sample_script.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}