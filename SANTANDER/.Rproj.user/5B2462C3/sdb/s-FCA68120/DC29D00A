{
    "contents" : "library(xgboost)\nlibrary(Matrix)\nlibrary(data.table)\nlibrary(bit64)\n\nset.seed(1234)\n\ntrain <- fread(\"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\train.csv\", data.table = F)\ntest  <- fread(\"D:\\\\kaggle\\\\SANTANDER\\\\DATA\\\\test.csv\", data.table = F)\n\n##### Removing IDs\ntrain$ID <- NULL\ntest.id <- test$ID\ntest$ID <- NULL\n\n##### Extracting TARGET\ntrain.y <- train$TARGET\ntrain$TARGET <- NULL\n\n##### 0 count per line\ncount0 <- function(x) {\n    return( sum(x == 0) )\n}\ntrain$n0 <- apply(train, 1, FUN=count0)\ntest$n0 <- apply(test, 1, FUN=count0)\n\n##### Removing constant features\ncat(\"\\n## Removing the constants features.\\n\")\nfor (f in names(train)) {\n    if (length(unique(train[[f]])) == 1) {\n        cat(f, \"is constant in train. We delete it.\\n\")\n        train[[f]] <- NULL\n        test[[f]] <- NULL\n    }\n}\n\n##### Removing identical features\nfeatures_pair <- combn(names(train), 2, simplify = F)\ntoRemove <- c()\nfor(pair in features_pair) {\n    f1 <- pair[1]\n    f2 <- pair[2]\n    \n    if (!(f1 %in% toRemove) & !(f2 %in% toRemove)) {\n        if (all(train[[f1]] == train[[f2]])) {\n            cat(f1, \"and\", f2, \"are equals.\\n\")\n            toRemove <- c(toRemove, f2)\n        }\n    }\n}\n\nfeature.names <- setdiff(names(train), toRemove)\n\ntrain <- train[, feature.names]\ntest <- test[, feature.names]\n\ntrain$TARGET <- train.y\n\n\ntrain <- sparse.model.matrix(TARGET ~ ., data = train)\n\ndtrain <- xgb.DMatrix(data=train, label=train.y)\nwatchlist <- list(train=dtrain)\n\nparam <- list(  objective           = \"binary:logistic\", \n                booster             = \"gbtree\",\n                eval_metric         = \"auc\",\n                eta                 = 0.0202,\n                max_depth           = 5,\n                subsample           = 0.6815,\n                colsample_bytree    = 0.701\n)\n\n\ncv <- xgb.cv(params = param, data = dtrain, nrounds = 572, nfold = 10,maximize = F)\n\nclf <- xgb.train(   params              = param, \n                    data                = dtrain, \n                    nrounds             = 572, \n                    verbose             = 2,\n                    watchlist           = watchlist,\n                    maximize            = FALSE\n)\n\n\ntest$TARGET <- -1\ntest <- sparse.model.matrix(TARGET ~ ., data = test)\n\npreds <- predict(clf, test)\nsubmission <- data.frame(ID=test.id, TARGET=preds)\ncat(\"saving the submission file\\n\")\nwrite.csv(submission, \"submission.csv\", row.names = F)\n",
    "created" : 1459699156950.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "198422432",
    "id" : "DC29D00A",
    "lastKnownWriteTime" : 1459699737,
    "path" : "D:/kaggle/SANTANDER/CODE/sub_04032016.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}