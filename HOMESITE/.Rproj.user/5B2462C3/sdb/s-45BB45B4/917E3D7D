{
    "contents" : "\nrequire(data.table); require(lubridate); require(caret); require(sqldf); require(xgboost); require(xlsx); require(dplyr); require(readr); require(doParallel)\n\ntrain_raw <- read_csv(\"train.csv\")\n\ntest_raw <- read_csv(\"test.csv\")\n\n\n# train_raw <- fread(input = \"D:\\\\kaggle\\\\HOMESITE\\\\Data\\\\train.csv\", data.table = F)\n\n# train_raw <- fread(input = \"D:\\\\kaggle\\\\HOMESITE\\\\Data\\\\train.csv\", data.table = F)\n\n\nresponse <- train_raw$QuoteConversion_Flag\n\ntrain_raw$QuoteConversion_Flag <- NULL\n\ntrain_raw$QuoteNumber <- NULL\n\n# test_raw <- fread(input = \"D:\\\\kaggle\\\\HOMESITE\\\\Data\\\\test.csv\", data.table = F)\n\nid <- test_raw$QuoteNumber\n\ntest_raw$QuoteNumber <- NULL\n\n# continous_vars <- c(\"Field8\", \"Field9\", \"Field11\", \"SalesField8\", \"Original_Quote_Date\", \"date\")\n\n# categorical and discrete are grouped into a single group \n\n# categorical_vars <- c()\n\nremove_vars <- c(\"PropertyField6\", \"GeographicField10A\")\n\ntmp <- rbind(train_raw, test_raw)\n\ntmp <- tmp[, !(names(tmp) %in% remove_vars)]\n\n\ntmp$Original_Quote_Date <- as.Date(tmp$Original_Quote_Date)\n\ntmp$month <- as.integer(format(tmp$Original_Quote_Date, \"%m\"))\n\ntmp$year <- as.integer(format(tmp$Original_Quote_Date, \"%y\"))\n\ntmp$day <- weekdays(as.Date(tmp$Original_Quote_Date))\n\ntmp$week <- week((as.Date(tmp$Original_Quote_Date)))\n\ntmp$date <- (((tmp$year * 52 ) + tmp$week) %% 4)\n\n#########################################################################################\n\n\n# a <- lapply(tmp, function(x) length(unique(x)))\n# \n# len_unique <- rep(0, ncol(tmp))\n# \n# for(i in 1:length(a))\n# {\n#   if(a[[i]] < 30) {\n#     \n#     len_unique[i] <- (names(a[i]))\n#   }\n#   \n# }\n# \n# len_unique <- len_unique[len_unique != 0]\n# \n# tmp_unique <- tmp[, len_unique]\n\n\n\ntmp[is.na(tmp)] <- -1\n\nrow_NA <- apply(tmp, 1, function(x) sum(x == -1))\n\ntmp$row_NA <- row_NA\n\ncount_zero <- apply(tmp, 1, function(x) sum(x == 0))\n\ntmp$count_zero <- count_zero\n\n\n# seperate character columns\n\nchar <- rep(0, length(names(tmp)))\n\nfor(i in names(tmp))\n  \n{\n  if(class(tmp[, i]) == \"character\"){\n    \n    char <- c(char, i)\n  }\n  \n  char <- char[char != 0 ]\n}\n\n# convert char columns to factors to dummify them\n\ntmp_char <- tmp[, char]\n\n# rm(tmp_unique)\n\nfor(f in names(tmp_char)){\n  \n  levels <- unique(tmp_char[, f])\n  \n  tmp_char[,f] <- factor(tmp_char[,f], levels = levels)\n  \n}\n\ndummies <- dummyVars( ~., data = tmp_char)\n\ntmp_char <- predict(dummies, newdata = tmp_char)\n\ntmp_char <- data.frame(tmp_char)\n\nrm(dummies)\n\ngc()\n\n\nfor (f in names(tmp)) {\n  \n  if (class(tmp[[f]])==\"character\") {\n    \n    levels <- unique(tmp[[f]])\n    \n    tmp[[f]] <- as.integer(factor(tmp[[f]], levels=levels))\n    \n  }\n  \n}\n\n#################################################################################################\n\n# \n# high_card <- c(\"PersonalField16\", \"PersonalField17\", \"PersonalField14\", \"PersonalField18\", \"PersonalField19\" )\n# \n# tmp_high_card <- tmp[, high_card]\n# \n# \n# str(tmp_high_card, list.len = 999)\n# \n# \n# cat(\"assuming text variables are categorical & replacing them with numeric ids\\n\")\n# \n# for (f in names(tmp_high_card)) {\n#   \n#   if (class(tmp_high_card[[f]])==\"character\") {\n#     \n#     levels <- unique(c(tmp[[f]]))\n#     \n#     tmp_high_card[[f]] <- as.integer(factor(tmp_high_card[[f]], levels=levels))\n#     \n#   }\n# }\n# \n# str(tmp_high_card, list.len = 999)\n# \n# # converting to factors\n# \n# len = length(names(tmp_high_card))\n# \n# for (i in 1:len) {\n#   \n#   print(paste0( i / (len) *100, \"%\"))\n#   \n#   tmp_high_card[ , i] <- as.factor(tmp_high_card[ , i])\n#   \n# }\n# \n# \n# # counts ;\n# \n# \n# tmp_factors <- tmp_high_card\n# \n# \n# # 2 way count\n# \n# nms <- combn(names(tmp_factors), 2)\n# \n# dim(nms)\n# \n# nms_df <- data.frame(nms) \n# \n# len = length(names(nms_df))\n# \n# for (i in 1:len) {\n#   \n#   nms_df[, i] <- as.character(nms_df[, i])\n#   \n# }\n# \n# tmp_count <- data.frame(id = 1:dim(tmp)[1])\n# \n# \n# for(i in 1:dim(nms_df)[2]){\n#   \n#   #new df \n#   \n#   print(paste0(((i / dim(nms_df)[2]) * 100), \"%\"))\n#   \n#   tmp_count[, paste(names(nms_df)[i], \"_two\", sep=\"\")] <- my.f2cnt(th2 = tmp_high_card, \n#                                                                    \n#                                                                    vn1 = nms_df[1,i], \n#                                                                    \n#                                                                    vn2 = nms_df[2,i] )\n#   \n# }\n# \n# \n# #3 way count\n# \n# nms <- combn(names(tmp_factors), 3)\n# \n# dim(nms)\n# \n# nms_df <- data.frame(nms); #nms_df <- nms_df[ c(1:3), c(1:100)]\n# \n# \n# len = length(names(nms_df))\n# \n# for (i in 1:len) {\n#   \n#   print(paste0(((i / len) * 100), \"%\"))\n#   \n#   nms_df[, i] <- as.character(nms_df[, i])\n#   \n# }\n# \n# for(i in 1:dim(nms_df)[2]){\n#   \n#   #new df \n#   \n#   print(paste0(((i / dim(nms_df)[2]) * 100), \"%\"))\n#   \n#   tmp_count[, paste(names(nms_df)[i], \"_three\", sep=\"\")] <- my.f3cnt(th2 = tmp_high_card, \n#                                                                      \n#                                                                      vn1 = nms_df[1,i], \n#                                                                      \n#                                                                      vn2 = nms_df[2,i], \n#                                                                      \n#                                                                      vn3 = nms_df[3,i])\n#   \n# }\n# \n# \n# #one way count\n# \n# len = length(names(tmp_factors))\n# \n# for(i in 1:len){\n#   \n#   \n#   print(paste0(((i / len) * 100), \"%\") )\n#   \n#   tmp_factors$x <- tmp_factors[, i]\n#   \n#   sum1 <- sqldf(\"select x, count(1) as cnt\n#                 \n#                 from tmp_factors  group by 1 \")\n#   \n#   tmp1 <- sqldf(\"select cnt from tmp_factors a left join sum1 b on a.x=b.x\")\n#   \n#   tmp_count[, paste(names(tmp_factors)[i], \"_cnt\", sep=\"\")] <- tmp1$cnt\n#   \n# }\n# \n# ##################################################################################################\n# \n# tmp_cont <- tmp[, continous_vars]\n# \n# tmp_cont$Original_Quote_Date <- NULL\n# \n# tmp_pre <-  preProcess(tmp_cont, method = (\"BoxCox\"))\n# \n# tmp_cont_new <- predict(tmp_pre, tmp_cont)\n# \n# \n# ###################################################################################################\n# \n# tmp <- tmp[, !(names(tmp) %in% c(continous_vars))]\n\n\ntmp_new <- cbind(tmp, tmp_char)\n\n\nrm(test_raw); rm(train_raw); rm(tmp_char)\n\n#############################################################################################\n\n\n# add interaction terms\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n#############################################################################################\n\n# plus interaction\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    #    a = i; b= j\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_plus_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] + tmp_int[, j]\n    \n  }\n}\n\n\ngc()\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n############################################################################################\n\n\n# create - interaction features\n\n\n# add interaction terms\n\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_minus_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] - tmp_int[, j]\n    \n  }\n}\n\n\ngc()\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n#############################################################################################\n\n# create * interaction features\n\n# add interaction terms\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_mult_', var.y)\n    \n    tmp_int[ , paste0(var.new)] <- tmp_int[, i] * tmp_int[, j]\n    \n  }\n}\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n#############################################################################################\n\n# create ^ interaction features\n\n# not using division interaction features - NA's\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_order_', var.y)\n    \n    tmp_int[, paste0(var.new)] <- (tmp_int[, i] * tmp_int[, j]) ^ 2\n    \n  }\n}\n\n\n#############################################################################################\n\n# NA terms test\n\na <- lapply(tmp_int, function(x) sum(is.na(x)))\n\n\nlen_unique <- rep(0, ncol(tmp_int))\n\nfor(i in 1:length(a))\n{\n  if(a[[i]]  != 0) {\n    \n    len_unique[i] <- (names(a[i]))\n  }\n  \n}\n\nlen_unique <- len_unique[len_unique != 0]\n\n\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n##################################################################################################\n\n\n# create 3^ interaction features\n\n# not using division interaction features - NA's\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, '_orderss_', var.y)\n    \n    tmp_int[, paste0(var.new)] <- (tmp_int[, i] * tmp_int[, j]) ^ 3\n    \n  }\n}\n\n\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n##################################################################################################\n\n# getting NA's with the below code\n\n# create 4^ interaction features\n\n# not using division interaction features - NA's\n\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ngc()\n\nrm(imp); \n\n\n\nfor (i in 1:ncol(tmp_int)) {\n  \n  for (j in (i + 1) : (ncol(tmp_int) + 1)) {\n    \n    var.x <- colnames(tmp_int)[i]\n    \n    var.y <- colnames(tmp_int)[j]\n    \n    var.new <- paste0(var.x, 'four_orderss_', var.y)\n    \n    tmp_int[, paste0(var.new)] <- (tmp_int[, i] * tmp_int[, j]) ^ 4\n    \n  }\n}\n\na <- lapply(tmp_int, function(x) sum(is.na(x)))\n\n\nlen_unique <- rep(0, ncol(tmp_int))\n\nfor(i in 1:length(a))\n{\n  if(a[[i]]  != 0) {\n    \n    len_unique[i] <- (names(a[i]))\n  }\n  \n}\n\nlen_unique <- len_unique[len_unique != 0]\n\n\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int)\n\ngc()\n\n\n##############################################################################################\n\ntmp_new <- tmp_new[, !(names(tmp_new) %in% top_50)]\n\nimp <- read_csv(\"D:\\\\kaggle\\\\HOMESITE\\\\FEATURE_IMP\\\\12062015_1.csv\")\n\ntop_50 <- imp$Feature[1:5]\n\ntmp_int <- tmp[, top_50]\n\nfor (f in top_50) {\n  \n  if (class(tmp_int[[f]])==\"character\") {\n    \n    levels <- unique(tmp_int[[f]])\n    \n    tmp_int[[f]] <- as.integer(factor(tmp_int[[f]], levels=levels))\n  }\n  \n}\n\n\ntmp_new <- cbind(tmp_new, tmp_int)\n\nrm(tmp_int); rm(tmp)\n\n\n##################################################################################\n\nrm(tmp); rm(test_raw); rm(train_raw); rm(tmp_char); rm(tmp_int); rm(imp)\n\n\ntrain <- tmp_new[c(1:260753), ]\n\ntest <- tmp_new[c(260754:434589), ]\n\nrm(tmp_new)\n\ngc()\n\n#train[is.na(train)] <- -1\n\n#test[is.na(test)] <- -1\n\n\n",
    "created" : 1454777663115.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4255236707",
    "id" : "917E3D7D",
    "lastKnownWriteTime" : 1454780550,
    "path" : "D:/kaggle/HOMESITE/blend/read_data.R",
    "project_path" : "blend/read_data.R",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "type" : "r_source"
}