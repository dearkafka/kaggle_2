{
    "contents" : "\n# read data-----------------------------------------------------------------------------------------------\n\nrequire(data.table); require(xgboost); require(caret); require(doParallel)\n\ntrain_raw <- fread(\"D:\\\\kaggle\\\\BNP\\\\DATA\\\\train.csv\", data.table = F)\n\ntest_raw <- fread(\"D:\\\\kaggle\\\\BNP\\\\DATA\\\\test.csv\", data.table = F)\n\n\nresponse <- train_raw$target\n\nid <- test_raw$ID\n\ntrain_raw$target <- NULL\n\ntrain_raw$ID <- NULL\n\ntest_raw$ID <- NULL\n\ntmp <- rbind(train_raw, test_raw)\n\nfeature.names <- names(tmp)\n\n#######################################################################################################\n\nfor (f in feature.names) {\n  \n  if (class(tmp[[f]]) == \"character\") {\n    \n    levels <- unique(c(tmp[[f]]))\n    \n    tmp[[f]] <- as.integer(factor(tmp[[f]], levels=levels))\n    \n    \n  }\n}\n\n\ntmp[is.na(tmp)] <- -1\n\n\n# create train and test sets---------------------------------------------------------------------------- \n\n# from train create training and hold out---------------------------------------------------------------\n\n# create 20 % validation set-----------------------------------------------------------------------------\n\n# from now on use data from training instead of train--------------------------------------------------\n\n\ntrain <- tmp[c(1:nrow(train_raw)), ]\n\ntest <- tmp[c((nrow(train_raw) +1) : nrow(tmp)), ]\n\n\ntrain$target <- response\n\nsplit <- createDataPartition(y = train$target, p = 0.8, list = F)\n\n\ntraining <- train[split, ]; training$target <- NULL\n\nresponse_tr <- response[split]\n\nholdout <- train[-split, ]; holdout$target <- NULL\n\nresponse_hol <- response[-split]\n\nh <- sample(nrow(training), 1000)\n\ndval<-xgb.DMatrix(data=data.matrix(training[h,]),label=response_tr[h])\n\ndtrain<-xgb.DMatrix(data=data.matrix(training[-h,]),label=response_tr[-h])\n\nwatchlist<-list(val=dval,train=dtrain)\n\n\nparam <- list(\n  \n  # general , non specific params - just guessing\n  \n  \"objective\"  = \"binary:logistic\"\n  \n  , \"eval_metric\" = \"logloss\"\n  \n  , \"eta\" = 0.01\n  \n  , \"subsample\" = 1\n  \n  , \"colsample_bytree\" = 0.2\n  \n  , \"min_child_weight\" = 5\n  \n  , \"max_depth\" = 10\n)\n\nstart <- Sys.time()\n\ncl <- makeCluster(4); registerDoParallel(cl)\n\nset.seed(1*14*16)\n\n# train----------------------------------------------------------------------------------------------\n\nclf <- xgb.train(   params              = param,\n                    \n                    data                = dtrain,\n                    \n                    nrounds             = 4000,\n                    \n                    verbose             = 1,  #1\n                    \n                    early.stop.round    = 1000,\n                    \n                    watchlist           = watchlist,\n                    \n                    maximize            = F,\n                    \n                    nthread = 4\n                    \n                    )\n\n\n# local validation------------------------------------------------------------------------------------\n\npred <- predict(clf, data.matrix(holdout[,feature.names]))\n\n# LogLoss Function\n\nLogLoss <- function(actual, predicted, eps=0.00001) {\n  \n  predicted <- pmin(pmax(predicted, eps), 1-eps)\n  \n  -1/length(actual)*(sum(actual*log(predicted)+(1-actual)*log(1-predicted)))\n  \n}\n\nLogLoss(response_hol, pred)\n\n# submission ------------------------------------------------------------------------------------------\n\npred <- predict(clf, data.matrix(test[,feature.names]))\n\nsubmission <- data.frame(ID = id, PredictedProb = pred)\n\nwrite_csv(submission, \"D:\\\\kaggle\\\\BNP\\\\submission\\\\local_val_chk_2.csv\")",
    "created" : 1457839234925.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2775308089",
    "id" : "9E7D1C5",
    "lastKnownWriteTime" : 1457985615,
    "path" : "D:/kaggle/BNP/CODE/plain_vanilla.R",
    "project_path" : "CODE/plain_vanilla.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}