# Convert the TripTypes to numeric factors and subtract 1. 

# XGB appears to require 0-n for the num_class parameter.

train <- read_csv("D:/kaggle/walmart_seg/Data/train.csv")

test <- read_csv("D:/kaggle/walmart_seg/Data/test.csv")

tlabels <- as.numeric(as.factor(train$TripType))-1

# Use the converted values as the label for XGB.

train[is.na(train)] <- -1

test[is.na(test)] <- -1

feature.names <- names(train)


for (f in feature.names) {
  
  if (class(train[[f]]) == "character") {
    
    levels <- unique(c(train[[f]], test[[f]]))
    
    train[[f]] <- as.integer(factor(train[[f]], levels=levels))
    
    test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
  }
}


xgbtrain <- xgb.DMatrix(data.matrix(train[, -c(1:2)]), label=tlabels, missing=NA)


# Run XGB with an objective of multi:softprob and use the predict function to get your probabilities.


numberOfClasses <- max(tlabels) + 1

param <- list(objective = "multi:softprob",
              
              eval_metric = "mlogloss",
              
              num_class = numberOfClasses,
              
              max_depth = 16,
              
              eta = 0.08,
              
              colsample_bytree = 0.45,
              
              subsample = 1
)

gc()


cl <- makeCluster(detectCores()); registerDoParallel(cl)


start <- Sys.time()


#############################################################################################################


clf <- xgb.train(params = param, data = xgbtrain, nrounds = 100, 
                 
                 verbose = 1, maximize = F, nthread = 2)


time_taken <- Sys.time() - start

xgbpred <- predict(clf, data.matrix(test[, feature.names])) 


# Shape the predicted probabilites vector into a matrix.


probs <- t(matrix(xgbpred, nrow=38, ncol=length(xgbpred)/38))


# Pull in the original TripTypes and replace the column names on the matrix. 


# I use a csv file with a single column of TripTypes.

typenames <- fread("tts.csv")


colnames(probs) <- typenames[,tt]

# Add in Visit Number and such, and rule the LeaderBoard
