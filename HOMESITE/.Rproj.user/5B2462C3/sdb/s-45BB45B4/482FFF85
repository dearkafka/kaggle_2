{
    "contents" : "require(doParallel); require(xgboost); require(caret)\n\ncl <- makeCluster(4); registerDoParallel(cl)\n\n# create folds------------------------------------------------------------------------------------------\n\ndataset_blend_train = matrix(0, nrow(train), 1)\n\ndataset_blend_test_j = matrix(0, nrow(test), 2) # this should always be number of folds \n\ndataset_blend_test = matrix(0, nrow(test), 1)\n\n# start iteration loop---------------------------------------------------------------------------------\n\n  \n  j = 1\n  \n  print(paste(\"starting xgboost iteration ; number :\", j))\n  \n  set.seed(2*05*2016*j)\n  \n  require(caret)\n  \n  skf = createFolds(response, k = 2)\n  \n  print(paste(nrow(dataset_blend_test_j),ncol(dataset_blend_test_j)))\n  \n  # start fold loop------------------------------------------------------------------------------------\n  \n  ### Loop over the folds\n  \n  i <- 0\n  \n  for (sk in skf) {\n    \n    i <- i + 1\n    \n    print(paste(\"Fold\", i))\n    \n    ### Extract and fit the train/test section for each fold\n    \n    tmp_train <- unlist(skf[i])\n    \n    x_train = train[-tmp_train,]\n    \n    y_train = response[-tmp_train]\n    \n    x_test  = train[tmp_train,]\n    \n    y_test  = response[tmp_train]\n    \n    \n    feature.names <- names(train)\n    \n    dtrain<-xgb.DMatrix(data=data.matrix(x_train),label=y_train, missing = NaN)\n    \n    param <- list(  objective           = \"binary:logistic\", \n                    \n                    booster = \"gbtree\",\n                    \n                    eval_metric = \"auc\",\n                    \n                    eta                 = 0.023, # 0.06, #0.01,\n                    \n                    max_depth           = 8, #changed from default of 8\n                    \n                    subsample           = 0.83, # 0.7\n                    \n                    colsample_bytree    = 0.77, # 0.7\n                    \n                    num_parallel_tree = 2\n                    \n    )\n    \n    # start training------------------------------------------------------------------------------\n    \n    print(paste(\"training xgboost for iteration :\", j, \"Fold ; number :\", i))\n    \n        \n    mod <- xgb.train(   params              = param,\n                        \n                        data                = dtrain,\n                        \n                        nrounds             = 3000,\n                        \n                        verbose             = 1,\n                        \n                        maximize            = T,\n                        \n                        nthread = 4)\n    \n    dataset_blend_train[tmp_train, j] <- predict(mod, data.matrix(x_test), missing = NaN)\n    \n    \n    \n    print(paste(\"predicting xgboost for test set iteration:\", j, \" ; Fold :\", i))\n    \n    dataset_blend_test_j[, i] <- predict(mod, data.matrix(test), missing = NaN)\n    \n  }\n  \n  dataset_blend_test[, j] <- rowMeans(dataset_blend_test_j)\n  \n\n\nrequire(readr)\n\nwrite_csv(data.frame(dataset_blend_train), \"D:\\\\kaggle\\\\HOMESITE\\\\blend\\\\bag\\\\xgb\\\\blend_train_xgb_02052016.csv\")\n\nwrite_csv(data.frame(dataset_blend_test), \"D:\\\\kaggle\\\\HOMESITE\\\\blend\\\\bag\\\\xgb\\\\blend_test_xgb_02052016.csv\")\n",
    "created" : 1454661925441.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1234903947",
    "id" : "482FFF85",
    "lastKnownWriteTime" : 1454698695,
    "path" : "D:/kaggle/HOMESITE/blend/bag_xgboost.R",
    "project_path" : "blend/bag_xgboost.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}