## Train a random forest using all default parameters
rfHex <- h2o.randomForest(x=features,
y="logSales",
ntrees = 100,
max_depth = 30,
nbins_cats = 1115, ## allow it to fit store ID
training_frame=trainHex)
summary(rfHex)
cat("Predicting Sales\n")
## Load test data into cluster from R
testHex<-as.h2o(test)
## Get predictions out; predicts in H2O, as.data.frame gets them into R
predictions<-as.data.frame(h2o.predict(rfHex,testHex))
## Return the predictions to the original scale of the Sales data
pred <- expm1(predictions[,1])
summary(pred)
submission <- data.frame(Id=test$Id, Sales=pred)
write_csv(submission, "D:/kaggle/Forecasting/submission/1023015.csv")
require(readr)
write_csv(submission, "D:/kaggle/Forecasting/submission/1023015.csv")
rfHex
rfHex@conn
rfHex@model_id
rfHex@parameters
rfHex@parametersrm(list = ls())
rm(list = ls())
library(readr); library(xgboost); library(data.table)
set.seed()
set.seed(28071993)
train <- fread("D:/kaggle/Forecasting/DATA/train.csv")
store <- fread("D:/kaggle/Forecasting/DATA/store.csv")
test <- fread("D:/kaggle/Forecasting/DATA/test.csv")
tmp <- rbind(train, test)
setdiff(names(train), names(test))
names(train)
names(test)
test[, `:=`(Sales = NULL, Customers = NULL )]
test[, `:=`(Sales = "NA", Customers = "NA" )]
names(test)
View(test)
tmp <- rbind(train, test)
train[, `:=`(Id = 1:nrow(train) )]
tmp <- rbind(train, test)
names(tmp)
tmp[, Date := as.Date(Date)]
tmp[, `:=`( month = as.integer(format(Date, "%m")),
year = as.integer(format(Date, "%y")),
day = as.integer(format(Date, "%d"))
)]
str(tmp)
tmp[, lapply(.SD, max) ,by = Store, .SDcols = Sales]
tmp[, lapply(.SD, max) ,by = Store, .SDcols = "Sales"]
tmp <- tmp[, lapply(.SD, as.numeric) ,by = Store, .SDcols = c("Sales", "Customers") ]
warnings(tmp)
View(tmp)
names(tmp)
tmp[, `:=`(lapply(.SD, as.numeric) , .SDcols = c("Sales", "Customers")) ]
tmp <- rbind(train, test)
tmp[, Date := as.Date(Date)]
tmp[, `:=`( month = as.integer(format(Date, "%m")),
year = as.integer(format(Date, "%y")),
day = as.integer(format(Date, "%d"))
)]
tmp[, `:=`(lapply(.SD, as.numeric) , .SDcols = c("Sales", "Customers")) ]
tmp[, (lapply(.SD, as.numeric) , .SDcols = c("Sales", "Customers")) ]
tmp[, lapply(.SD, as.numeric) , .SDcols = c("Sales", "Customers") ]
str(tmp)
tmp[, `:=`(lapply(.SD, as.numeric) , .SDcols = c("Sales", "Customers")) ]
tmp[ , `:=`( Sales = as.numeric(Sales), Customers = as.numeric(Customers))]
tmp <- data.frame(tmp)
train <- merge(train,store)
class(tmp)
str(tmp)
tmp <- setDT(tmp)
class(tmp)
str(tmp)
tmp[ , lapply(.SD, max), by = store]
tmp[ , lapply(.SD, max), by = Id]
tmp <- as.data.frame(tmp)
str(tmp)
tmp <- setDT(tmp)
?max
tmp[ , for(i in names(tmp) max(i)), by = Id]
tmp[ , lapply(.SD, max), by = store]
tmp <- data.frame(tmp)
require(dplyr)
install.packages("dplyr")
require(dplyr)
tmp %>% group_by(Store) %>% lapply( max)
str(tmp)
tmp %>% group_by(Store) %>% lapply(tmp,  max)
tapply(tmp, Store, max)
tapply(tmp, tmp$Store, max)
group_by(tmp, Store)
str(tmp)
table(tmp$Store)
group_by(tmp, Store) %>% lapply(max)
group_by(tmp, Store) %>% lapply(tmp, max)
lapply(tmp, max)
tmp_1 <- group_by(tmp, Store)
lapply(tmp_1, max)
group_by(tmp, Store) %>% summarise(max)
x <- c(1,2,4)
max(x)
group_by(tmp, Store) %>% summarise(lapply, max)
group_by(tmp, Store) %>% summarise(lapply, max())
names(tmp)
group_by(tmp, Store) %>% summarise(day = max(DayOfWeek))
tmp <- setDT(tmp)
tmp <- setDT(tmp)
str(tmp)
tmp[ , max(Sales) , by = Store]
train[ , max(Sales) , by = Store]
names(tmp)
train[ , for( i in names(tmp) max(i)) , by = Store]
class(names(tmp))
for( i in names(tmp)
print(i)
for( i in names(tmp)
i
class(tmp)
str(tmp)
tmp[Open > 1]
tmp[Open == 1]
str(tmp)
train <- tmp[1:nrow(train), ]
test <- tmp[nrow(train) + 1:nrow(tmp), ]
(nrow(train)+1)
(nrow(train)+1)
test <- tmp[(nrow(train)+1) : nrow(tmp), ]
?merge
train <- merge(train,store)
names(store)
names(train)
train <- merge(train,store, by = "Store")
test <- merge(test,store, by = "Store")
class(train)
class(test)
rm(list = ls())
library(readr); library(xgboost); library(data.table)
set.seed(28071993)
train <- fread("D:/kaggle/Forecasting/DATA/train.csv")
store <- fread("D:/kaggle/Forecasting/DATA/store.csv")
test <- fread("D:/kaggle/Forecasting/DATA/test.csv")
setdiff(names(train), names(test))
train[, Date := as.Date(Date)]
test[, Date := as.Date(Date)]
test[, `:=`(Sales = "NA", Customers = "NA" )]
train[, `:=`(Id = 1:nrow(train) )]
tmp <- rbind(train, test)
tmp[, Date := as.Date(Date)]
tmp[, `:=`( month = as.integer(format(Date, "%m")),
year = as.integer(format(Date, "%y")),
day = as.integer(format(Date, "%d"))
)]
train <- tmp[1:nrow(train), ]
test <- tmp[(nrow(train)+1) : nrow(tmp), ]
train <- merge(train,store, by = "Store")
test <- merge(test,store, by = "Store")
setdiff(names(train), names(test))
setdiff( names(test), names(train))
rm(list = ls())
library(readr); library(xgboost); library(data.table)
set.seed(28071993)
train <- fread("D:/kaggle/Forecasting/DATA/train.csv")
store <- fread("D:/kaggle/Forecasting/DATA/store.csv")
test <- fread("D:/kaggle/Forecasting/DATA/test.csv")
train <- merge(train,store, by = "Store")
test <- merge(test,store, by = "Store")
setdiff(names(train), names(test))
test[, `:=`(Sales = "NA", Customers = "NA" )]
train[, `:=`(Id = 1:nrow(train) )]
tmp <- rbind(train, test)
tmp[, Date := as.Date(Date)]
tmp[, `:=`( month = as.integer(format(Date, "%m")),
year = as.integer(format(Date, "%y")),
day = as.integer(format(Date, "%d"))
)]
str(tmp)
table(tmp$PromoInterval)
table(tmp$Promo)
table(tmp$Promo2)
factors <- names(tmp)[-c("Date", "Sales", "Customers", "CompetitionDistance")]
factors <- (names(tmp) %in% !c("Date", "Sales", "Customers", "CompetitionDistance")])
factors <- !(names(tmp) %in% c("Date", "Sales", "Customers", "CompetitionDistance")])
factors <- (names(tmp) %in% !c("Date", "Sales", "Customers", "CompetitionDistance"))
factors <- (!names(tmp) %in% c("Date", "Sales", "Customers", "CompetitionDistance"))
factors <- names(tmp)[!(names(tmp) %in% c("Date", "Sales", "Customers",
"CompetitionDistance"))]
factors
"CompetitionDistance"))]
for( i in factors){
length(table(tmp[i]))
}
tmp <- data.frame(tmp)
for( i in factors){
length(table(tmp[i]))
}
i
1  length(table(tmp[i])
length(table(tmp[i])
)
for( i in factors){
print(length(table(tmp[i])))
}
print(paste(i, length(table(tmp[i]))))
print(paste(i, ":", length(table(tmp[i]))))
for( i in factors){
print(paste(i, ":", length(table(tmp[i]))))
}
table(tmp$CompetitionOpenSinceYear)
factors <- names(tmp)[!(names(tmp) %in% c("Date", "Sales", "Customers",
"CompetitionDistance", "Id"))]
tmp <- data.frame(tmp)
for( i in factors){
print(paste(i, ":", length(table(tmp[i]))))
}
for( i in factors){
tmp[, i] <- as.factor(tmp[, i])
print(paste(i, ":", length(table(tmp[i]))))
}
str(tmp)
nms <- combn(names(tmp), 2)
nms
dim(nms)
nms_df <- data.frame(nms)
len = length(names(nms_df))
for (i in 1:len) {
nms_df[, i] <- as.character(nms_df[, i])
}
tmp_count <- data.frame(id = 1:dim(tmp)[1])
factors
nms <- combn(factors, 2)
dim(nms)
nms_df <- data.frame(nms)
len = length(names(nms_df))
for (i in 1:len) {
nms_df[, i] <- as.character(nms_df[, i])
}
tmp_count <- data.frame(id = 1:dim(tmp)[1])
for(i in 1:dim(nms_df)[2]){
#new df
print(((i / dim(nms_df)[2]) * 100 ))
tmp_count[, paste(i, "_two", sep="")] <- my.f2cnt(th2 = tmp,
vn1 = nms_df[1,i],
vn2 = nms_df[2,i] )
}
my.f2cnt <- function(th2, vn1, vn2, filter=TRUE) {
df <- data.frame(f1=th2[,vn1], f2=th2[,vn2], filter=filter)
sum1 <- sqldf("select f1, f2, count(*) as cnt
from df
where filter=1
group by 1,2")
tmp <- sqldf("select b.cnt
from df a left join sum1 b
on a.f1=b.f1 and a.f2=b.f2")
tmp$cnt[is.na(tmp$cnt)] <- 0
return(tmp$cnt)
}
#3 way count
my.f3cnt<-function(th2, vn1, vn2, vn3, filter=TRUE) {
df<-data.frame(f1=th2[,vn1], f2=th2[,vn2], f3=th2[, vn3], filter=filter)
sum1<-sqldf("select f1, f2, f3, count(*) as cnt
from df
where filter=1
group by 1,2, 3")
tmp<-sqldf("select b.cnt
from df a left join sum1 b
on a.f1=b.f1 and a.f2=b.f2 and a.f3=b.f3")
tmp$cnt[is.na(tmp$cnt)]<-0
return(tmp$cnt)
}
# group data => create combinations of a given order
groupData <- function(xmat, degree)
{
# indices of combinations
xind <- combn(1:ncol(xmat), degree)
# storage structure for the result
agx <- foreach(ii = 1:ncol(xind), .combine = cbind ) %do%
{
x <- xmat[,xind[1,ii]]
for (jj in 2:nrow(xind))
{
x <- paste(x, xmat[,xind[jj,ii]], sep = "_")
}
x
}
colnames(agx) <- paste(paste("f", degree, sep = ""), 1:ncol(agx), sep = "_")
return(agx)
}
nms <- combn(factors, 2)
nms
dim(nms)
nms_df <- data.frame(nms)
len = length(names(nms_df))
len
for (i in 1:len) {
nms_df[, i] <- as.character(nms_df[, i])
}
nms_df
for (i in 1:len) {
nms_df[, i] <- as.character(nms_df[, i])
}
tmp_count <- data.frame(id = 1:dim(tmp)[1])
for(i in 1:dim(nms_df)[2]){
#new df
print(((i / dim(nms_df)[2]) * 100 ))
tmp_count[, paste(i, "_two", sep="")] <- my.f2cnt(th2 = tmp,
vn1 = nms_df[1,i],
vn2 = nms_df[2,i] )
}
require(sqldf)
for(i in 1:dim(nms_df)[2]){
#new df
print(((i / dim(nms_df)[2]) * 100 ))
tmp_count[, paste(i, "_two", sep="")] <- my.f2cnt(th2 = tmp,
vn1 = nms_df[1,i],
vn2 = nms_df[2,i] )
}
dim(tmp_count)
View(tmp_count)
nms <- combn(factors, 3)
dim(nms)
nms_df <- data.frame(nms)
len = length(names(nms_df))
len
for (i in 1:len) {
print(paste0(( i / len) *100, "%"))
nms_df[, i] <- as.character(nms_df[, i])
}
for(i in 1:dim(nms_df)[2]){
#new df
print((i / dim(nms_df)[2]) * 100)
tmp_count[, paste(i, "_three", sep="")] <- my.f3cnt(th2 = tmp,
vn1 = nms_df[1,i],
vn2 = nms_df[2,i],
vn3 = nms_df[3,i])
}
tmp_new = cbind.data.frame(tmp, tmp_count)
RMPSE<- function(preds, dtrain) {
labels <- getinfo(dtrain, "label")
elab<-exp(as.numeric(labels))-1
epreds<-exp(as.numeric(preds))-1
err <- sqrt(mean((epreds/elab-1)^2))
return(list(metric = "RMPSE", value = err))
}
nrow(train)
require(data.table); require(xgboost); require(caret)
?combn
dim(nms_df)
gc()
tmp_new[is.na(tmp_new)]
gc()
nrow(train)
library(readr); library(xgboost); library(data.table)
set.seed(28071993)
rm(list = ls(
))
set.seed(28071993)
train <- fread("D:/kaggle/Forecasting/DATA/train.csv")
store <- fread("D:/kaggle/Forecasting/DATA/store.csv")
test <- fread("D:/kaggle/Forecasting/DATA/test.csv")
train <- merge(train,store, by = "Store")
test <- merge(test,store, by = "Store")
setdiff(names(train), names(test))
test[, `:=`(Sales = "NA", Customers = "NA" )]
train[, `:=`(Id = 1:nrow(train) )]
tmp <- rbind(train, test)
tmp[, Date := as.Date(Date)]
tmp[, `:=`( month = as.integer(format(Date, "%m")),
year = as.integer(format(Date, "%y")),
day = as.integer(format(Date, "%d"))
)]
factors <- names(tmp)[!(names(tmp) %in% c("Date", "Sales", "Customers",
"CompetitionDistance", "Id"))]
tmp <- data.frame(tmp)
tmp_original <- tmp
for( i in factors){
tmp[, i] <- as.factor(tmp[, i])
print(paste(i, ":", length(table(tmp[i]))))
}
my.f2cnt <- function(th2, vn1, vn2, filter=TRUE) {
df <- data.frame(f1=th2[,vn1], f2=th2[,vn2], filter=filter)
sum1 <- sqldf("select f1, f2, count(*) as cnt
from df
where filter=1
group by 1,2")
tmp <- sqldf("select b.cnt
from df a left join sum1 b
on a.f1=b.f1 and a.f2=b.f2")
tmp$cnt[is.na(tmp$cnt)] <- 0
return(tmp$cnt)
}
#3 way count
my.f3cnt<-function(th2, vn1, vn2, vn3, filter=TRUE) {
df<-data.frame(f1=th2[,vn1], f2=th2[,vn2], f3=th2[, vn3], filter=filter)
sum1<-sqldf("select f1, f2, f3, count(*) as cnt
from df
where filter=1
group by 1,2, 3")
tmp<-sqldf("select b.cnt
from df a left join sum1 b
on a.f1=b.f1 and a.f2=b.f2 and a.f3=b.f3")
tmp$cnt[is.na(tmp$cnt)]<-0
return(tmp$cnt)
}
#####################################################################################################
#2 way count--------------------------------------------------------------------
nms <- combn(factors, 2)
dim(nms)
nms_df <- data.frame(nms)
len = length(names(nms_df))
for (i in 1:len) {
nms_df[, i] <- as.character(nms_df[, i])
}
tmp_count <- data.frame(id = 1:dim(tmp)[1])
for(i in 1:dim(nms_df)[2]){
print(((i / dim(nms_df)[2]) * 100 ))
tmp_count[, paste(i, "_two", sep="")] <- my.f2cnt(th2 = tmp,
vn1 = nms_df[1,i],
vn2 = nms_df[2,i] )
}
require(sqldf)
rm(list = ls())
library(readr); library(xgboost); library(data.table)
set.seed(28071993)
train <- fread("D:/kaggle/Forecasting/DATA/train.csv")
store <- fread("D:/kaggle/Forecasting/DATA/store.csv")
test <- fread("D:/kaggle/Forecasting/DATA/test.csv")
train <- merge(train,store, by = "Store")
test <- merge(test,store, by = "Store")
setdiff(names(train), names(test))
test[, `:=`(Sales = "NA", Customers = "NA" )]
train[, `:=`(Id = 1:nrow(train) )]
tmp <- rbind(train, test)
tmp[, Date := as.Date(Date)]
tmp[, `:=`( month = as.integer(format(Date, "%m")),
year = as.integer(format(Date, "%y")),
day = as.integer(format(Date, "%d"))
)]
factors <- names(tmp)[!(names(tmp) %in% c("Date", "Sales", "Customers",
"CompetitionDistance", "Id"))]
tmp <- data.frame(tmp)
tmp_original <- tmp
for( i in factors){
tmp[, i] <- as.factor(tmp[, i])
print(paste(i, ":", length(table(tmp[i]))))
}
##########################################################################################
#using owen`s Amazon code approach
my.f2cnt <- function(th2, vn1, vn2, filter=TRUE) {
df <- data.frame(f1=th2[,vn1], f2=th2[,vn2], filter=filter)
sum1 <- sqldf("select f1, f2, count(*) as cnt
from df
where filter=1
group by 1,2")
tmp <- sqldf("select b.cnt
from df a left join sum1 b
on a.f1=b.f1 and a.f2=b.f2")
tmp$cnt[is.na(tmp$cnt)] <- 0
return(tmp$cnt)
}
#3 way count
my.f3cnt<-function(th2, vn1, vn2, vn3, filter=TRUE) {
df<-data.frame(f1=th2[,vn1], f2=th2[,vn2], f3=th2[, vn3], filter=filter)
sum1<-sqldf("select f1, f2, f3, count(*) as cnt
from df
where filter=1
group by 1,2, 3")
tmp<-sqldf("select b.cnt
from df a left join sum1 b
on a.f1=b.f1 and a.f2=b.f2 and a.f3=b.f3")
tmp$cnt[is.na(tmp$cnt)]<-0
return(tmp$cnt)
}
#####################################################################################################
#2 way count--------------------------------------------------------------------
nms <- combn(factors, 2)
dim(nms)
nms_df <- data.frame(nms)
len = length(names(nms_df))
for (i in 1:len) {
nms_df[, i] <- as.character(nms_df[, i])
}
tmp_count <- data.frame(id = 1:dim(tmp)[1])
for(i in 1:dim(nms_df)[2]){
print(((i / dim(nms_df)[2]) * 100 ))
tmp_count[, paste(i, "_two", sep="")] <- my.f2cnt(th2 = tmp,
vn1 = nms_df[1,i],
vn2 = nms_df[2,i] )
}
start <- Sys.time()
nms <- combn(factors, 3)
dim(nms)
nms_df <- data.frame(nms)
len = length(names(nms_df))
for (i in 1:len) {
print(paste0(( i / len) *100, "%"))
nms_df[, i] <- as.character(nms_df[, i])
}
for(i in 1:dim(nms_df)[2]){
print((i / dim(nms_df)[2]) * 100)
tmp_count[, paste(i, "_three", sep="")] <- my.f3cnt(th2 = tmp,
vn1 = nms_df[1,i],
vn2 = nms_df[2,i],
vn3 = nms_df[3,i])
}
time_taken <- start - Sys.time()
time_taken
tmp_new = cbind.data.frame(tmp_original, tmp_count)
train <-  tmp_new[1:1017209,  ]
test <- tmp_new[(1017209+1) : nrow(tmp_new), ]
